## from : https://github.com/statico/dotfiles/blob/master/.zshrc
# INTERNAL UTILITY FUNCTIONS {{{1

# Returns whether the given command is executable or aliased.
_has() {
  return $( whence $1 &>/dev/null )
}

function have_cmd {
    if ! hash $1 2>/dev/null; then
        echo "zshrc: Command '$1' is not installed"
        return 1
    fi
}

# Returns whether the given statement executed cleanly. Try to avoid this
# because this slows down shell loading.
_try() {
  return $( eval $* &>/dev/null )
}

# Returns whether the current host type is what we think it is. (HOSTTYPE is
# set later.)
_is() {
  return $( [ "$HOSTTYPE" = "$1" ] )
}

# Returns whether out terminal supports color.
_color() {
  return $( [ -z "$INSIDE_EMACS" ] )
}

# Returns the version of a command if present, or n/a if unavailable.
_versionof() {
  if _has "$1"; then
    echo "$1 $($1 --version)"
  else
    echo "$1 n/a"
  fi
}

## }}}
# ENVIRONMENT VARIABLES {{{

# Yes, this defeats the point of the TERM variable, but everything pretty much
# uses modern ANSI escape sequences. I've found that forcing everything to be
# "rxvt" just about works everywhere. (If you want to know if you're in screen,
# use SHLVL or TERMCAP.)
if _color; then
  if [ -n "$ITERM_SESSION_ID" ]; then
    if [ "$TERM" = "screen" ]; then
      export TERM=screen-256color
    else
      export TERM=xterm-256color
    fi
  elif [ "$TERM_PROGRAM" = "gnome-terminal" ]; then
      export TERM=xterm-256color
  else
      export TERM=xterm-256color
  fi
else
  export TERM=xterm
fi

# Utility variables.
if which hostname &>/dev/null; then
  HOSTNAME=`hostname`
elif which uname &>/dev/null; then
  HOSTNAME=`uname -n`
else
  HOSTNAME=unknown
fi
export HOSTNAME

# HOSTTYPE = { Linux | OpenBSD | SunOS | etc. }
if which uname &>/dev/null; then
  HOSTTYPE=`uname -s`
else
  HOSTTYPE=unknown
fi
export HOSTTYPE

# PAGER
if [ -n "$INSIDE_EMACS" ]; then
  export PAGER=cat
else
  if _has less; then
    export PAGER=less
    if _color; then
      export LESS='-R'
    fi
  fi
fi

# EDITOR
if _has vim; then
  export EDITOR=vim VISUAL=vim
elif _has nvim; then
  export EDITOR=nvim VISUAL=nvim
elif _has vi; then
  export EDITOR=vi VISUAL=vi
elif _has micro; then
  export EDITOR=micro VISUAL=micro
fi

# Overridable locale support.
if [ -z $$LC_ALL ]; then
  export LC_ALL=C
fi
if [ -z $LANG ]; then
  export LANG=en_US
fi

# History control. Don't bother with history if we can't write to the file,
# like if we're using sudo.
if [ -w ~/.zsh_history -o -w ~ ]; then
  SAVEHIST=100000
  HISTSIZE=100000
HISTFILE=~/.zsh_history
fi

# uses ip or ifconfig, good on older or newer system 
sys.my-ip() {
        echo "--------------- Network Information ---------------"
	# newer system like arch
	ip addr | awk '/global/ {print $1,$2}' | cut -d\/ -f1
	ip addr | awk '/global/ {print $3,$4}'
	ip addr | awk '/ether/ {print $1,$2}'
	ip addr | awk '/scope link/ {print $1,$2}' | cut -d\/ -f1
	# older system like debian
        ifconfig | awk '/inet addr/ {print $1,$2}' | awk -F: '{print $1,$2}'
        ifconfig | awk '/Bcast/ {print $3}' | awk -F: '{print $1,$2}'
        ifconfig | awk '/inet addr/ {print $4}' | awk -F: '{print $1,$2}'
        ifconfig | awk '/HWaddr/ {print $4,$5}'
        ifconfig | awk '/Scope:Link/ {print $1,$3}' | cut -d\/ -f1
        echo Current IP $(curl -s http://checkip.dyndns.org/ | grep -o "[[:digit:].]\+")
        echo "---------------------------------------------------"
}

#}}}

# APPLICATION CUSTOMIZATIONS {{{1

# GNU grep
if _color; then
  export GREP_COLOR='1;32'
fi

# GNU and BSD ls colorization.
if _color; then
#  export LS_COLORS='no=00:fi=00:di=01;34:ln=01;36:pi=33:so=01;35:bd=33;01:cd=33;01:or=01;05;37;41:mi=01;37;41:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.bz=01;31:*.tz=01;31:*.rpm=01;31:*.cpio=01;31:*.jpg=01;35:*.gif=01;35:*.bmp=01;35:*.xbm=01;35:*.xpm=01;35:*.png=01;35:*.tif=01;35:'
#  export LSCOLORS='ExGxFxdxCxDxDxcxcxxCxc'
#  export CLICOLOR=1
fi

# PATH MODIFICATIONS {{{1

# Functions which modify the path given a directory, but only if the directory
# exists and is not already in the path. (Super useful in ~/.zshlocal)

_prepend_to_path() {
  if [ -d $1 -a -z ${path[(r)$1]} ]; then
    path=($1 $path);
  fi
}

_append_to_path() {
  if [ -d $1 -a -z ${path[(r)$1]} ]; then
    path=($path $1);
  fi
}

_force_prepend_to_path() {
  path=($1 ${(@)path:#$1})
}

# Note that there is NO dot directory appended!

_force_prepend_to_path /usr/local/sbin
_force_prepend_to_path /usr/local/bin
_force_prepend_to_path ~/bin
_force_prepend_to_path ~/scripts

# _append_to_path /usr/games
_append_to_path /usr/sbin

# Add our docs, too
#export INFOPATH=$HOME/.dotfiles/info:$INFOPATH

# ALIASES {{{1

## ================== taken from oh-my-zsh web plugin =======
# web_search from terminal {{{5
## tool body {{{
function web_search() {
  emulate -L zsh

function open_command() {
  emulate -L zsh
  setopt shwordsplit

  local open_cmd

  # define the open command
  case "$OSTYPE" in
    darwin*)  open_cmd='open' ;;
    cygwin*)  open_cmd='cygstart' ;;
    linux*)   open_cmd='xdg-open' ;;
    msys*)    open_cmd='start ""' ;;
    *)        echo "Platform $OSTYPE not supported"
              return 1
              ;;
  esac

  # don't use nohup on OSX
  if [[ "$OSTYPE" == darwin* ]]; then
    $open_cmd "$@" &>/dev/null
  else
    nohup $open_cmd "$@" &>/dev/null
  fi
}
  # define search engine URLS
  typeset -A urls
  urls=(
    google      "https://www.google.com/search?q="
    bing        "https://www.bing.com/search?q="
    yahoo       "https://search.yahoo.com/search?p="
    duckduckgo  "https://www.duckduckgo.com/?q="
    startpage   "https://www.startpage.com/do/search?q="
    yandex      "https://yandex.ru/yandsearch?text="
    github      "https://github.com/search?q="
    baidu       "https://www.baidu.com/s?wd="
    ecosia      "https://www.ecosia.org/search?q="
    goodreads   "https://www.goodreads.com/search?q="
    qwant       "https://www.qwant.com/?q="
    givero      "https://www.givero.com/search?q="
    stackoverflow  "https://stackoverflow.com/search?q="
  )

  # check whether the search engine is supported
  if [[ -z "$urls[$1]" ]]; then
    echo "Search engine $1 not supported."
    return 1
  fi

  # search or go to main page depending on number of arguments passed
  if [[ $# -gt 1 ]]; then
    # build search url:
    # join arguments passed with '+', then append to search engine URL
    url="${urls[$1]}${(j:+:)@[2,-1]}"
  else
    # build main page url:
    # split by '/', then rejoin protocol (1) and domain (2) parts with '//'
    url="${(j://:)${(s:/:)urls[$1]}[1,2]}"
  fi

  open_command "$url"
}
# }}}

alias bing='web_search bing'
alias google='web_search google'
alias yahoo='web_search yahoo'
alias ddg='web_search duckduckgo'
alias sp='web_search startpage'
alias yandex='web_search yandex'
alias github='web_search github'
alias baidu='web_search baidu'
alias ecosia='web_search ecosia'
alias goodreads='web_search goodreads'
alias qwant='web_search qwant'
alias givero='web_search givero'
alias stackoverflow='web_search stackoverflow'

#add your own !bang searches here
alias wiki='web_search duckduckgo \!w'
alias news='web_search duckduckgo \!n'
alias youtube='web_search duckduckgo \!yt'
alias map='web_search duckduckgo \!m'
alias image='web_search duckduckgo \!i'
alias ducky='web_search duckduckgo \!'
#
# }}}5
## ------------------------ end of web plugin functions

## ---------- Utilityty Funcs  ------------------ {{{3
## form https://github.com/jotyGill/quickz-sh/blob/master/.zshrc
speedtest() {
    curl -s https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py | python3 -
}

dadjoke() {
    curl https://icanhazdadjoke.com
}

dict() {
    if [ "$3" ]; then
        curl "dict://dict.org/d:$1 $2 $3"
    elif [ "$2" ]; then
        curl "dict://dict.org/d:$1 $2"
    else
        curl "dict://dict.org/d:$1"
    fi
}
# nvim help from cli (Ex: :h diff)
function :h { nv +":h $1" +'wincmd o' +'nnoremap q :q!<CR>' ;}

## ---- }}}3
#
## FZF functions {{{4
# Override the following functions used by fuzzy completion:
function fd() {
  if [ -x "$(command -v fdfind)" ]; then
    # alternate name used on ubuntu/debian
    command fdfind --color always $* | less
  else
    command fd --color always $* | less
  fi
}
alias fd='noglob fd'
# for more info see fzf/shell/completion.zsh
_fzf_compgen_path() {
    fd . "$1"
}
_fzf_compgen_dir() {
    fd --type d . "$1"
}
# with above functions fd will power fzf, CTRL-T, ALT-C, and **

# find-in-file - usage: fif <SEARCH_TERM>
fif() {
  if [ ! "$#" -gt 0 ]; then
    echo "Need a string to search for! usage: fif <SEARCH_TERM>";
    return 1;
  fi
    rg --files-with-matches --no-messages "$1" | fzf $FZF_PREVIEW_WINDOW --preview "rg --ignore-case --pretty --context 10 '$1' {}"
}

function fzf.man(){
	MAN="/usr/bin/man"
	if [ -n "$1" ]; then
		$MAN "$@"
		return $?
	else
		$MAN -k . | fzf --reverse --preview="echo {1,2} | sed 's/ (/./' | sed -E 's/\)\s*$//' | xargs $MAN" | awk '{print $1 "." $2}' | tr -d '()' | xargs -r $MAN
		return $?
	fi
}
#alias man="myman"

## ffe find with preview and edit in vim     {{{
fzf_find_edit() {
    local file=$(
##      fzf --no-multi --preview 'bat --color=always --line-range :500 {}'
        fzf --preview='pistol {}'
      )
    if [[ -n $file ]]; then
        $EDITOR $file
    fi
}
# }}}
alias ffe='fzf_find_edit'
bindkey -s '^X^e' 'ffe\n'

# fge grep edit {{{
fzf_grep_edit(){
    if [[ $# == 0 ]]; then
        echo 'Error: search term was not provided.'
        return
    fi
    local match=$(
      rg --color=never --line-number "$1" |
        fzf --no-multi --delimiter : \
           --preview "bat --color=always --line-range {2}: {1}"
      )
    local file=$(echo "$match" | cut -d':' -f1)
    if [[ -n $file ]]; then
        $EDITOR $file +$(echo "$match" | cut -d':' -f2)
    fi
}
# }}}
alias fge='fzf_grep_edit'

# git log {{{
fzf_git_log() {
    local commits=$(
      git l --color=always "$@" |
        fzf --ansi --no-sort --height 100% \
            --preview "echo {} | grep -o '[a-f0-9]\{7\}' | head -1 |
                       xargs -I@ sh -c 'git show --color=always @'"
      )
    if [[ -n $commits ]]; then
        local hashes=$(printf "$commits" | cut -d' ' -f2 | tr '\n' ' ')
        git show $hashes
    fi
}
# }}}
alias gll='fzf_git_log'

# git log pickaxe {{{
fzf_git_log_pickaxe() {
     if [[ $# == 0 ]]; then
         echo 'Error: search term was not provided.'
         return
     fi
     local commits=$(
       git log --oneline --color=always -S "$@" |
         fzf --ansi --no-sort --height 100% \
             --preview "git show --color=always {1}"
       )
     if [[ -n $commits ]]; then
         local hashes=$(printf "$commits" | cut -d' ' -f1 | tr '\n' ' ')
         git show $hashes
     fi
 }
# }}}
alias glS='fzf_git_log_pickaxe'

# alias grl git ref log {{{
fzf_git_reflog() {
    local hash=$(
      git reflog --color=always "$@" |
        fzf --no-multi --ansi --no-sort --height 100% \
            --preview "git show --color=always {1}"
      )
    echo $hash
}
# }}}
alias grl='fzf_git_reflog'
#
## --- }}}4
#
# Choose binary in $PATH with fzf
insert_binary_from_path() {
    cmd=$(print -rl -- ${(ko)commands} | fzf --height 40% --layout=reverse)
    LBUFFER="${LBUFFER}${cmd}"
    zle redisplay
}
zle -N insert_binary_from_path
bindkey '^[d' insert_binary_from_path  # Alt+d
## ================== not Aliased =======
## -- }}}1

### funcs not aliased {{{2
#
# fs - Determine size of a file or total size of a dir {{{
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}
## }}}

## swap - files or dirs  {{{
function swap() {
    mv "$1" "$1.tmp"
    mv "$2" "$1"
    mv "$1.tmp" "$2"
}
## }}}
#
function file.fd-find {
  command fd -p "${PWD}.*$1" ${@:2}
}
#-------------------------------------------------------
# fh - "find [in] history"
# Inspired by: https://github.com/junegunn/fzf/wiki/examples#command-history
function sk.hist-find() {
  print -z $(fc -l 1 | sk --no-multi --tac -q "$*" | sed 's/ *[0-9]*\*\{0,1\} *//')
}
#-------------------------------------------------------
sys.zsh-stat()
{
  fc -l 1 | awk '{CMD[$2]++;count++;}END { for (a in CMD)print CMD[a] " " CMD[a]/count*100 "% " a;}' \
    | grep -v "./" \
    | column -c3 -s " " -t \
    | sort -nr \
    | nl \
    |  head -n20
}
#-------------------------------------------------------
sys.memuse()
{
ps -eo pmem,comm | grep $1 | awk '{sum+=$1} END {print sum " % of RAM"}'
}

#-------------------------------------------------------
# Use 'gnome-open' to "run" things
sys.run()
{
    [ -r "$*" ] &&
    {
        xdg-open "$*" >& /dev/null
    } ||
     {
        echo "'$*' not found or not readable!"
     }
}
#-------------------------------------------------------
# Print README file colored by bat ( https://github.com/sharkdp/bat )
readme() {
    for readme in {readme,README}.{md,MD,markdown,txt,TXT,mkd}; do
        if [[ -f "$readme" ]]; then
	   bat "$readme"
        fi
    done
}

## }}}2

#-------------------------------------------------------
## show .md files with in terminal glow and less pager
show.md-less() {
  glow "$@" -s dark | less -r
}

if [[ -f $HOME/.zgen/wfxr/forgit-master/forgit.plugin.zsh ]]; then
	source $HOME/.zgen/wfxr/forgit-master/forgit.plugin.zsh
fi

#-------------------------------------------------------
# kill process
function peco.kill-ps() {
    ps ax -o pid,time,command | peco --query "$LBUFFER" | awk '{print $1}' | xargs kill
}
alias killp='peco.kill-ps'

#-------------------------------------------------------
#---------list-all-man-pages----------------------------  {{{
# http://qiita.com/Linda_pp/items/9ff801aa6e00459217f7
function list-all-man-pages() {
    local parent dir file
    local paths=("${(s/:/)$(man -aw)}")
    for parent in $paths; do
        for dir in $(/bin/ls -1 $parent); do
            local p="${parent}/${dir}"
            if [ -d "$p" ]; then
                IFS=$'\n' local lines=($(/bin/ls -1 "$p"))
                for file in $lines; do
                    echo "${p}/${file}"
                done
            fi
        done
    done
}

function fzf.man-dir() {
    local selected=$(list-all-man-pages \
                    | fzf --prompt='man> ' --pointer='▶' --marker='✓' \
                    --color='hl:148,hl+:154,pointer:032,marker:010,bg+:237,gutter:008' \
                    --preview '([[ -f {} ]] && \
                     (bat --style=numbers --color=always {} || \
                        cat {})) || ([[ -d {} ]] && (tree -C {} | \
                        less)) || echo {} 2> /dev/null | head -200' \
                    --bind '?:toggle-preview'
                    --bind 'ctrl-a:select-all'
                    --bind 'ctrl-y:execute-silent(echo {+} | pbcopy)'
                    --bind 'ctrl-e:execute(echo {+} | xargs -o vim)'
                    --bind 'ctrl-v:execute(code {+})'
                    )
    if [[ "$selected" != "" ]]; then
         man "$selected"
    fi
}
zle -N fzf.man-dir
bindkey '^xk' fzf.man-dir

## from: https://github.com/knqyf263/pet/blob/master/README.md
function pet.select() {
  BUFFER=$(pet search --query "$LBUFFER")
  CURSOR=$#BUFFER
  zle redisplay
}
zle -N pet.select
stty -ixon
bindkey '^xs' pet.select

### }}}

help.sxhkd () {
    awk '/^[a-z]/ && last {print "|" $0,"\t",last,"|"} {last=""} /^#/{last=$0}' ~/.config/sxhkd/sxhkdrc | column -t -s $'\t' 
}

# aur pkg
pkg.aur-get () {
  git clone https://aur.archlinux.org/"$1".git
  # curl -fO https://aur.archlinux.org/cgit/aur.git/snapshot/"$1".tar.gz
  cd $1
  makepkg -s
  # makepkg -s --sign
  cd ..
}

# {{{2 Cute clock
# clock - A bash clock that can run in your terminal window.
sys.clock ()
{
while true;do clear;echo "===========";date +"%r";echo "===========";sleep 1;done
}
# }}} 

cheat.curl() {
  curl cht.sh/$1/$2
}

##### THE END ***

sleep 0.1
