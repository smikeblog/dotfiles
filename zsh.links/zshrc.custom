# Load ,profile file wich is common for bash and zsh
if [ -f ~/.profile ]; then
    source ~/.profile
fi

# load user custom functions
if [[ -f ~/.zshfunc.custom ]]; then
  source ~/.zshfunc.custom
fi
# load some func one liners ...
export ZSHCONFIG="${HOME}/.dotfiles"
ZSH_INIT=${ZSHCONFIG}/_init.sh
ZSH_COLORIZE_STYLE="native"

if [[ -s ${ZSH_INIT} ]]; then
    source ${ZSH_INIT}
else
    echo "Could not find the init script ${ZSH_INIT}"
fi

# Vi mode
bindkey -v
export KEYTIMEOUT=1

## some aliases   {{{
# Luke Smith's config of nvim for vim. Use to compile and work with text, .tex, .md, .rmd ... files
if [ -e $HOME/.vil/init.vim ]; then
  alias vil="nvim -u $HOME/.vil/init.vim $1"
fi
if [ -e $HOME/.vimm/vimrc ]; then
  alias nvi="nvim -u $HOME/.vimm/init.vim $1"
fi
if [ -e $HOME/.go.vimrc ]; then
  alias vimgo="vim -u $HOME/.go.vimrc $1"
fi
if [ -e  $HOME/.dotfiles/vim/vim-vanilla/vimrc-symlink ]; then
  alias vi="nvim -u $HOME/.dotfiles/vim/vim-vanilla/vimrc-symlink "
fi
alias vin="nvim -N -u NONE -U NONE "

# cli translate  - https://github.com/soimort/translate-shell
alias trans-enru='trans -shell en:ru '

# Naive linter for English prose need npm >= 5.2.0 ( https://github.com/btford/write-good )
if _has npx; then
  alias writegood="npx write-good $1" 
fi

# 3 days weather
alias sm.weather='curl wttr.in/chisinau'

# rootkit scanner
alias sm.antivir='sudo rkhunter -c'

alias s3='$HOME/space/sublime_text_3/sublime_text -a '

# utils
# https://github.com/athityakumar/colorls
if _has exa; then
  alias lx='exa --color=always --group-directories-first'
  alias ll='exa -lh --color=always --group-directories-first'
  alias lll='exa -lah --color=always --group-directories-first'
  alias lt='exa -aT --color=always --group-directories-first' # tree listing
fi
alias lct2='lsd -t --tree=2 --group-dirs=first'
alias lc='lsd -lhA --group-dirs=first'
alias lcgt2='colorls --gs -t --tree=2 --sd'
alias  k='k -h'
# Pipe Aliases
alias -g W=' | writecmd '
alias -g S=' | sort '
alias -g P=' | peco '

alias msrofi='rofi -show drun -sidebar-mode \
  -modi run,drun,window \
  -hide-scrollbar true \
  -bw 2 \
  -lines 12 \
  -padding 24 \
  -width 60 \
  -location 0 \
  -columns 3 \
  -font "Noto Sans 9" \
  -color-enabled true
'
   ##   }}}

### time consuming node ruby python env sol-s {{{
#### NODE
if [ -d $HOME/.yarn/bin ] && [ -d $HOME/.nvm ]; then
	# Add yarn bin
	export PATH=$PATH:$HOME/.yarn/bin

	## solution from https://github.com/nvm-sh/nvm/issues/1277
	##declare -a NODE_GLOBALS_NPM=(`find $HOME/.nvm/versions/node -maxdepth 3 -type l -wholename '*/bin/*'`)
	declare -a NODE_GLOBALS_YARN=(`find $HOME/.yarn/bin -maxdepth 3 -type l -wholename '*/bin/*'`)
	declare -a NODE_GLOBALS=(`echo $NODE_GLOBALS_NPM $NODE_GLOBALS_YARN | xargs -n1 basename | sort | uniq`)
	NODE_GLOBALS+=("node")
	NODE_GLOBALS+=("nvm")

	load_nvm () {
	    export NVM_DIR=$HOME/.nvm
	    [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
	    export NODE_PATH="$NVM_BIN"
	}

	for cmd in "${NODE_GLOBALS[@]}"; do
	    eval "${cmd}(){ unset -f ${NODE_GLOBALS}; load_nvm; ${cmd} \$@ }"
	done
fi
### }}}

# us
if _has rg; then
  export FZF_DEFAULT_COMMAND='rg --files --hidden --follow --glob "!.git/*"'
fi

# load completions and styles
if [[ -f  $HOME/.dotfiles/zsh.links/zshcompletion ]]; then
  source $HOME/.dotfiles/zsh.links/zshcompletion
fi
# fzf via system package manager
if [ -e /usr/share/fzf/completion.zsh ]; then
  source /usr/share/fzf/key-bindings.zsh
  source /usr/share/fzf/completion.zsh
fi
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# use vim as manpager
# export MANPAGER="/bin/sh -c \"col -b | vim -i NONE -u $HOME/.dotfiles/vim/vim-vanilla/vimrc-symlink --not-a-term -c 'set ft=man ts=8 nomod nolist noma' -\""
export MANPAGER="nvim +set\ filetype=man -"

# Modules
autoload colors zsh/terminfo
autoload -Uz compinit && compinit -u
autoload -U is-at-least
colors

# Edit line in vim with ctrl-e:
autoload edit-command-line; zle -N edit-command-line
bindkey '^e' edit-command-line

# bind o to open urls from terminal screen
[[ -n "$TMUX" ]] && tmux bind-key 'o' run-shell -b "$HOME/scripts/fzf-url.sh";

bindkey -s '^u' 'fzf-url.sh\n'

# pmy go zff helper
eval "$(pmy init)"

# automatically remove duplicates from these arrays
typeset -U path cdpath fpath manpath

# Fix $TERM if a terminfo for the terminal is not available
if ! infocmp "$TERM" >/dev/null 2>&1; then
  if [ "$TERM" = "rxvt-unicode-256color" ]; then
    if infocmp "rxvt-256color" >/dev/null 2>&1; then
      TERM="rxvt-256color"
    fi
  fi
  if [ "$TERM" = "tmux-256color" ]; then
    if infocmp "screen-256color" >/dev/null 2>&1; then
      TERM="screen-256color"
    fi
  fi
fi

# Force 256-colorization by correcting TERM variable
if [[ "$TERM" == "xterm" && -e /usr/share/terminfo/x/xterm-256color ]]; then
    TERM="xterm-256color"
elif [[ "$TERM" == "screen" && -e /usr/share/terminfo/s/screen-256color ]]; then
    TERM="screen-256color"
elif [[ "$TERM" == "screen-bce" && -e /usr/share/terminfo/s/screen-256color-bce ]]; then
    TERM="screen-256color-bce"
fi

### ----------------------------------------------------
## use lf as cd utility with Ctrl+o binding
lfcd () {
    tmp="$(mktemp)"
    lf -last-dir-path="$tmp" "$@"
    if [ -f "$tmp" ]; then
        dir="$(cat "$tmp")"
        rm -f "$tmp"
        [ -d "$dir" ] && [ "$dir" != "$(pwd)" ] && cd "$dir"
    fi
}
bindkey -s '^o' 'lfcd\n'

# icons for lf experimental fiture {{{
export LF_ICONS="\
di=:\
fi=:\
ln=:\
or=:\
ex=:\
*.c=:\
*.cc=:\
*.clj=:\
*.coffee=:\
*.cpp=:\
*.css=:\
*.d=:\
*.dart=:\
*.erl=:\
*.exs=:\
*.fs=:\
*.go=:\
*.h=:\
*.hh=:\
*.hpp=:\
*.hs=:\
*.html=:\
*.java=:\
*.jl=:\
*.js=:\
*.json=:\
*.lua=:\
*.md=:\
*.php=:\
*.pl=:\
*.pro=:\
*.py=:\
*.rb=::\
*.rs=:\
*.scala=:\
*.ts=:\
*.vim=:\
*.cmd=:\
*.ps1=:\
*.sh=:\
*.zsh=:\
*.bash=:\
*.fish=:\
*.tgz=:\
*.tar=:\
*.arc=:\
*.arj=:\
*.taz=:\
*.lha=:\
*.lz4=:\
*.lzh=:\
*.lzma=:\
*.tlz=:\
*.txz=:\
*.tzo=:\
*.t7z=:\
*.zip=:\
*.z=:\
*.dz=:\
*.gz=:\
*.tz=:\
*.lz=:\
*.lzo=:\
*.xz=:\
*.zst=:\
*.tzst=:\
*.bz2=:\
*.bz=:\
*.tbz=:\
*.tbz2=:\
*.tz=:\
*.deb=:\
*.rpm=:\
*.jar=:\
*.war=:\
*.ear=:\
*.sar=:\
*.alz=:\
*.ace=:\
*.zoo=:\
*.cpio=:\
*.7z=:\
*.rar=:\
*.cab=:\
*.rz=:\
*.wim=:\
*.swm=:\
*.dwm=:\
*.esd=:\
*.mjpg=:\
*.mjpeg=:\
*.gif=:\
*.bmp=:\
*.pbm=:\
*.pgm=:\
*.ppm=:\
*.tga=:\
*.xbm=:\
*.tif=:\
*.tiff=:\
*.xpm=:\
*.png=:\
*.svg=:\
*.svgz=:\
*.mng=:\
*.pcx=:\
*.mov=:\
*.mpg=:\
*.mpeg=:\
*.m2v=:\
*.mkv=:\
*.webm=:\
*.ogm=:\
*.mp4=:\
*.m4v=:\
*.mp4v=:\
*.vob=:\
*.qt=:\
*.nuv=:\
*.wmv=:\
*.asf=:\
*.rm=:\
*.rmvb=:\
*.flc=:\
*.avi=:\
*.fli=:\
*.flv=:\
*.gl=:\
*.dl=:\
*.xcf=:\
*.xwd=:\
*.yuv=:\
*.cgm=:\
*.emf=:\
*.ogv=:\
*.ogx=:\
*.aac=:\
*.au=:\
*.flac=:\
*.m4a=:\
*.mid=:\
*.midi=:\
*.mka=:\
*.mpc=:\
*.mp3=:\
*.ogg=:\
*.ra=:\
*.wav=:\
*.ra=:\
*.oga=:\
*.opus=:\
*.spx=:\
*.xspf=:\
*.pdf=:\
*.jpeg=:\
*.jpg=:\
*.doc=:\
*.xls=:\
*.ppt=:\
"
# }}}

alias emoj="emoji-fzf preview | fzf --preview 'emoji-fzf get {1}' | cut -d \" \" -f 1 | emoji-fzf get | xclip"

# show vim status {{{
# http://zshwiki.org/home/examples/zlewidgets
#function zle-line-init zle-keymap-select {
#    RPS1="${${KEYMAP/vicmd/-- NORMAL --}/(main|viins)/-- INSERT --}"
#    RPS2=$RPS1
#    zle reset-prompt
#}

#zle -N zle-line-init
#zle -N zle-keymap-select
## next 2 lines for NORMAL default mode
#zle-line-init() { zle -K vicmd; }
#zle -N zle-line-init
# }}}

# fzf via local installation {{{
#if [ -e ~/.fzf ]; then
#  _append_to_path ~/.fzf/bin
#  source ~/.fzf/shell/key-bindings.zsh
#  source ~/.fzf/shell/completion.zsh
#fi
## }}}

# source <(cod init $$ zsh)
