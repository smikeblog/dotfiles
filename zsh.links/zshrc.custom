# Load ,profile file wich is common for bash and zsh
if [ -f ~/.profile ]; then
    source ~/.profile
fi

# load user custom functions
if [[ -f ~/.zshfunc.custom ]]; then
  source ~/.zshfunc.custom
fi
# load some func one liners ...
export ZSHCONFIG="${HOME}/.dotfiles"
ZSH_INIT=${ZSHCONFIG}/_init.sh
ZSH_COLORIZE_STYLE="native"

if [[ -s ${ZSH_INIT} ]]; then
    source ${ZSH_INIT}
else
    echo "Could not find the init script ${ZSH_INIT}"
fi

# Vi mode
bindkey -v
export KEYTIMEOUT=1

### time consuming node ruby python env sol-s {{{2
#### NODE
if [ -d $HOME/.yarn/bin ] && [ -d $HOME/.nvm ]; then
	# Add yarn bin
	export PATH=$PATH:$HOME/.yarn/bin

	## solution from https://github.com/nvm-sh/nvm/issues/1277
	##declare -a NODE_GLOBALS_NPM=(`find $HOME/.nvm/versions/node -maxdepth 3 -type l -wholename '*/bin/*'`)
	declare -a NODE_GLOBALS_YARN=(`find $HOME/.yarn/bin -maxdepth 3 -type l -wholename '*/bin/*'`)
	declare -a NODE_GLOBALS=(`echo $NODE_GLOBALS_NPM $NODE_GLOBALS_YARN | xargs -n1 basename | sort | uniq`)
	NODE_GLOBALS+=("node")
	NODE_GLOBALS+=("nvm")

	load_nvm () {
	    export NVM_DIR=$HOME/.nvm
	    [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
	    export NODE_PATH="$NVM_BIN"
	}

	for cmd in "${NODE_GLOBALS[@]}"; do
	    eval "${cmd}(){ unset -f ${NODE_GLOBALS}; load_nvm; ${cmd} \$@ }"
	done
fi
### 2}}}

# us
if _has rg; then
  export FZF_DEFAULT_COMMAND='rg --files --hidden --follow --glob "!.git/*"'
fi
# defines the fuzzy completion trigger as **
export FZF_COMPLETION_TRIGGER='**' # change ** to whatever

# load completions and styles
if [[ -f  $HOME/.dotfiles/zsh.links/zshcompletion ]]; then
  source $HOME/.dotfiles/zsh.links/zshcompletion
fi
# fzf via system package manager
if [ -e /usr/share/fzf/completion.zsh ]; then
  source /usr/share/fzf/key-bindings.zsh
  source /usr/share/fzf/completion.zsh
fi
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

if [ -e $HOME/.dotfiles/tools/sk ]; then
  source $HOME/.dotfiles/home.local/bin/fzf-scripts/key-bindings-skim.zsh
  source $HOME/.dotfiles/home.local/bin/fzf-scripts/completion-skim.zsh
fi

# use vim as manpager
# export MANPAGER="/bin/sh -c \"col -b | vim -i NONE -u $HOME/.dotfiles/vim/vim-vanilla/vimrc-symlink --not-a-term -c 'set ft=man ts=8 nomod nolist noma' -\""
#export MANPAGER="nvim +set\ filetype=man -"
export MANPAGER='nvim +Man!'

# Modules
autoload colors zsh/terminfo
autoload -Uz compinit && compinit -u
autoload -U is-at-least
colors

# Edit line in vim with ctrl-e:
autoload edit-command-line; zle -N edit-command-line
bindkey '^e' edit-command-line

# bind o to open urls from terminal screen
# [[ -n "$TMUX" ]] && tmux bind-key 'o' run-shell -b "$HOME/scripts/fzf-url.sh";
# bindkey -s '^u' 'fzf-url.sh\n'
 bindkey -s '^u' 'mrofi\n'

# automatically remove duplicates from these arrays
typeset -U path cdpath fpath manpath

# Fix $TERM if a terminfo for the terminal is not available {{{1
if ! infocmp "$TERM" >/dev/null 2>&1; then
  if [ "$TERM" = "rxvt-unicode-256color" ]; then
    if infocmp "rxvt-256color" >/dev/null 2>&1; then
      TERM="rxvt-256color"
    fi
  fi
  if [ "$TERM" = "tmux-256color" ]; then
    if infocmp "screen-256color" >/dev/null 2>&1; then
      TERM="screen-256color"
    fi
  fi
fi

# Force 256-colorization by correcting TERM variable
if [[ "$TERM" == "xterm" && -e /usr/share/terminfo/x/xterm-256color ]]; then
    TERM="xterm-256color"
elif [[ "$TERM" == "screen" && -e /usr/share/terminfo/s/screen-256color ]]; then
    TERM="screen-256color"
elif [[ "$TERM" == "screen-bce" && -e /usr/share/terminfo/s/screen-256color-bce ]]; then
    TERM="screen-256color-bce"
fi
###  1}}}
### ----------------------------------------------------
## use lf as cd utility with Ctrl+o binding  {{{1
lfcd () {
    tmp="$(mktemp)"
    lf -last-dir-path="$tmp" "$@"
    if [ -f "$tmp" ]; then
        dir="$(cat "$tmp")"
        rm -f "$tmp"
        [ -d "$dir" ] && [ "$dir" != "$(pwd)" ] && cd "$dir"
    fi
}
bindkey -s '^o' 'lfcd\n'

ranger_cd() {
    temp_file="$(mktemp -t "ranger_cd.XXXXXXXXXX")"
    ranger --choosedir="$temp_file" -- "${@:-$PWD}"
    if chosen_dir="$(cat -- "$temp_file")" && [ -n "$chosen_dir" ] && [ "$chosen_dir" != "$PWD" ]; then
        cd -- "$chosen_dir"
    fi
    rm -f -- "$temp_file"
}
# This will run the function by Ctrl+O through returning
# the string "ranger-cd" in addition to a new-line character
# to act as Enter key-press
bindkey -s "^P" "ranger_cd\n"

###   2}}}
## 1}}}

# show vim mode on RPS - insert or normal {{{2
# http://zshwiki.org/home/examples/zlewidgets
#function zle-line-init zle-keymap-select {
#    RPS1="${${KEYMAP/vicmd/-- NORMAL --}/(main|viins)/-- INSERT --}"
#    RPS2=$RPS1
#    zle reset-prompt
#}

#zle -N zle-line-init
#zle -N zle-keymap-select
## next 2 lines for NORMAL default mode
#zle-line-init() { zle -K vicmd; }
#zle -N zle-line-init
# 2}}}

## some aliases   {{{1
# Luke Smith's config of nvim for vim. Use to compile and work with text, .tex, .md, .rmd ... files
if [ -e $HOME/.vil/init.vim ]; then
  alias vil="nvim -u $HOME/.vil/init.vim $1"
fi
if [ -e $HOME/.vimm/vimrc ]; then
  alias nvi="nvim -u $HOME/.vimm/init.vim $1"
fi
if [ -e $HOME/.go.vimrc ]; then
  alias vimgo="vim -u $HOME/.go.vimrc $1"
fi
if [ -e  $HOME/.dotfiles/vim/vim-vanilla/vimrc-symlink ]; then
  alias vi="nvim -u $HOME/.dotfiles/vim/vim-vanilla/vimrc-symlink $1"
fi
alias vin="nvim -N -u NONE -U NONE $1"

alias vidt="nvim -u ~/.dotfiles/initDT.vim $1"

alias emoj="emoji-fzf preview | fzf --preview 'emoji-fzf get {1}' | cut -d \" \" -f 1 | emoji-fzf get | xclip"

# cli translate  - https://github.com/soimort/translate-shell
alias trans-enru='trans -shell en:ru '
alias trans-enen='gawk -f <(curl -Ls git.io/translate) -- -shell '

# Naive linter for English prose need npm >= 5.2.0 ( https://github.com/btford/write-good )
if _has npx; then
  alias writegood="npx write-good $1"
fi

# 3 days weather
alias sm.weather='curl wttr.in/chisinau'

# rootkit scanner
alias sm.antivir='sudo rkhunter -c'

alias s3='$HOME/space/sublime_text_3/sublime_text -a '

# utils
# https://github.com/athityakumar/colorls
if _has exa; then
  alias lx='exa --color=always --group-directories-first'
  alias lld='exa -lh --color=always --group-directories-first'
  alias lll='exa -lah --color=always --group-directories-first'
  alias ll='exa -lhF --git-ignore --group-directories-first --time-style=long-iso'
  alias lt='exa -aT --color=always --group-directories-first' # tree listing
  alias exa2='exa -alhF --git-ignore --group-directories-first --time-style=long-iso -T -L=2 --ignore-glob=".git|node_modules"'
fi
if _has lsd; then
  alias lct2='lsd -t --tree=2 --group-dirs=first'
  alias lc='lsd -lhA --group-dirs=first'
fi
alias lcgt2='colorls --gs -t --tree=2 --sd'
alias  k='k -h'
# Pipe Aliases
alias -g W=' | writecmd '
alias -g S=' | sort '
alias -g P=' | peco '

# kill process fuzzy search with ~/.dotfiles/tools/sk (skim)
alias pskl='ps aux | sk | awk "{ print \$2 }" | xargs kill -9'

alias rofim='rofi -show window -sidebar-mode \
  -modi run,window,drun,keys \
  -hide-scrollbar true \
  -bw 2 \
  -lines 12 \
  -padding 24 \
  -width 60 \
  -location 0 \
  -columns 2 \
  -font "Noto Sans 9" \
  -color-enabled true
'

alias ...="cd ../.."
alias l.="ls -A | egrep '^\.' "
alias l..='cd .. && l'
alias ez="$EDITOR $HOME/.zshrc"
alias ezf="$EDITOR $HOME/.zshfunc.custom"
alias ezc="$EDITOR $HOME/.zshrc.custom"

# bulk association
alias -s {tex,md,rmd,txt}=vil
alias -s {mp3,m4a,flac}="mpv"
alias -s {png,jpg,tiff,bmp}="sxiv"

if [ -f /usr/bin/pacman ]; then
  alias pkglist="pacman -Qneq > ~/Code/$(date +"%Y-%m-%d-@%H-%M")-pkglist.txt"
fi
  alias aurlist="pacman -Qmeq > ~/Code/$(date +"%Y-%m-%d-@%H-%M")-aurlist.txt"

##   1}}}

# pmy go fzf helper  Ctrl-<Space>
[ -f $HOME/.dotfiles/tools/pmy ] && eval "$(pmy init)"

# navi cli cheat completion utility Ctrl+G
if [ -e $HOME/.config/navi ]; then
#  source "$(navi widget zsh)"
  source <(navi widget zsh)
fi
# ls alternative file manip utility  - br
if [ -f /usr/bin/broot ]; then
  source /home/sm/.config/broot/launcher/bash/br
fi

alias bb='b $(buku -p -f 10 | fzf)'
alias bspk="~/.config/sxhkd/show_help.sh"

alias ntod='vi ~/Sync/smNotes/$(date "+%Y-%m-%d").md'
alias nytod='vi ~/Sync/smNotes/$(ls ~/Sync/smNotes | sort | tail -n 1)'
alias npec='glow ~/Sync/smNotes/$(ls ~/Sync/smNotes | sort | peco)'

bindkey "^b" fzf-cd-widget
#
source $HOME/.dotfiles/home.local/bin/currentwordcompletion.zsh
