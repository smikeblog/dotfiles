# Vi mode
bindkey -v
export KEYTIMEOUT=1

# Load ,profile file wich is common for bash and zsh
if [ -f ~/.profile ]; then
    source ~/.profile
fi
if [ -f ~/.zprofile ]; then
    source ~/.zprofile
fi

# load user custom functions
if [[ -f ~/.zshfunc.custom ]]; then
  source ~/.zshfunc.custom
fi
# load some func one liners ...
export ZSHCONFIG="${HOME}/.dotfiles"
ZSH_INIT=${ZSHCONFIG}/_init.sh
ZSH_COLORIZE_STYLE="native"

if [[ -s ${ZSH_INIT} ]]; then
    source ${ZSH_INIT}
else
    echo "Could not find the init script ${ZSH_INIT}"
fi

if [ -e $HOME/.dotfiles/tools/sk ]; then
  source $HOME/.dotfiles/home.local/bin/fzf-scripts/key-bindings-skim.zsh
  source $HOME/.dotfiles/home.local/bin/fzf-scripts/completion-skim.zsh
fi

# fzf via system package manager
if [ -e $HOME/.fzf/shell/completion.zsh ]; then
  source $HOME/.fzf/shell/key-bindings.zsh
  source $HOME/.fzf/shell/completion.zsh
fi

# use vim as manpager
export MANPAGER='nvim +Man!'

export _EXTRACT="
# trim input
in=\${\${\"\$(<{f})\"%\$'\0'*}#*\$'\0'}
# get ctxt for current completion
local -A ctxt=(\"\${(@ps:\2:)CTXT}\")
"
zstyle ':fzf-tab:*' single-group ''
zstyle ':fzf-tab:complete:_zlua:*' query-string input
zstyle ':fzf-tab:complete:kill:argument-rest' extra-opts --preview=$_EXTRACT'ps --pid=$in[(w)1] -o cmd --no-headers -w -w' --preview-window=down:3:wrap
lsd_preview() {
	zstyle "$1" extra-opts --preview=$_EXTRACT'lsd --group-dirs first --color always --icon always --icon-theme fancy ${~ctxt[hpre]}$in'
}
lsd_preview ':fzf-tab:complete:cd:*'
lsd_preview ':fzf-tab:complete:lsd:*'
lsd_preview ':fzf-tab:complete:exa:*'
lsd_preview ':fzf-tab:complete:ls:*'
lsd_preview ':fzf-tab:complete:_fzz:*'
zstyle ':fzf-tab:complete:man:*' extra-opts --preview=$_EXTRACT'man ${~ctxt[hpre]}$in'

## === fzf-tab.zsh settings ===
#zstyle ':fzf-tab:complete:_zlua:*' query-string input
#zstyle ':fzf-tab:complete:kill:argument-rest' fzf-preview 'ps --pid=$word -o cmd --no-headers -w -w'
#zstyle ':fzf-tab:complete:kill:argument-rest' fzf-flags '--preview-window=down:3:wrap'
#zstyle ':fzf-tab:complete:kill:*' popup-pad 0 3
#zstyle ':fzf-tab:complete:cd:*' fzf-preview 'exa -1 --color=always $realpath'
#zstyle ':fzf-tab:complete:cd:*' popup-pad 30 0
#zstyle ":completion:*:git-checkout:*" sort false
#zstyle ":fzf-tab:*" fzf-flags '--color=bg+:23'
#zstyle ':fzf-tab:*' fzf-command ftb-tmux-popup

# ==== ====

# Modules
autoload colors zsh/terminfo
# autoload -Uz compinit && compinit -u
autoload -U is-at-least
colors

# Edit line in vim with ctrl-e:
autoload edit-command-line; zle -N edit-command-line
bindkey '^e' edit-command-line

# bind "Cttrl-u"to open rofi in win select mode
bindkey -s '^u' 'mrofi\n'

### ----------------------------------------------------
## use lf/ranger as cd utility with Ctrl+o/Ctrl+p bindings  {{{1
lfcd () {
    tmp="$(mktemp)"
    lf -last-dir-path="$tmp" "$@"
    if [ -f "$tmp" ]; then
        dir="$(cat "$tmp")"
        rm -f "$tmp"
        [ -d "$dir" ] && [ "$dir" != "$(pwd)" ] && cd "$dir"
    fi
}
bindkey -s '^o' 'lfcd\n'

ranger_cd() {
    temp_file="$(mktemp -t "ranger_cd.XXXXXXXXXX")"
    ranger --choosedir="$temp_file" -- "${@:-$PWD}"
    if chosen_dir="$(cat -- "$temp_file")" && [ -n "$chosen_dir" ] && [ "$chosen_dir" != "$PWD" ]; then
        cd -- "$chosen_dir"
    fi
    rm -f -- "$temp_file"
}
# This will run the function by Ctrl+p through returning
# the string "ranger-cd" in addition to a new-line character
# to act as Enter key-press
bindkey -s "^P" "ranger_cd\n"

###   2}}}
## 1}}}

## some aliases   {{{1

# Alias for altering some symbol with newline
# Example: echo $PATH TRN :
__rt__() { tr -- "$2" "$1" ; }
alias -g TRN='| __rt__ "\n" '

# Lua based testing configs
alias vilu="nvim -u ~/.config/nvimDj/init.vim"
alias vlua="nvim -u ~/.config/nvimLua/init.vim"
alias vlu="nvim -u ~/.config/neovim/init.vim"

# Luke Smith's config of nvim for vim. Use to compile and work with text, .tex, .md, .rmd ... files
if [ -e $HOME/.vil/init.vim ]; then
  alias vil="nvim -u $HOME/.vil/init.vim $1"
fi
if [ -e $HOME/.vimm/vimrc ]; then
  alias nvi="nvim -u $HOME/.vimm/init.vim $1"
fi
if [ -e $HOME/.go.vimrc ]; then
  alias vimgo="vim -u $HOME/.go.vimrc $1"
fi
if [ -e  $HOME/.dotfiles/vim/vim-vanilla/vimrc-symlink ]; then
  alias vi="nvim -u $HOME/.dotfiles/vim/vim-vanilla/vimrc-symlink $1"
fi
alias vin="nvim -N -u NONE -U NONE $1"

alias vidt="nvim -u ~/.dotfiles/initDT.vim $1"

alias emoj="emoji-fzf preview | fzf --preview 'emoji-fzf get --name {1}' | cut -d \" \" -f 1 | emoji-fzf get"

if _has vifm; then
  alias v.='COLORTERM=tmux-256color vifm -c "vsplit" . ' # vi file manager
fi

# cli translate  - https://github.com/soimort/translate-shell
alias trans-enru='trans -shell en:ru '
alias trans-enen='gawk -f <(curl -Ls git.io/translate) -- -shell '

# Naive linter for English prose need npm >= 5.2.0 ( https://github.com/btford/write-good )
if _has npx; then
  alias writegood="npx write-good $1"
fi

# 3 days weather
alias sm.weather='curl wttr.in/chisinau'

# rootkit scanner
alias sm.antivir='sudo rkhunter -c'

alias s3='$HOME/space/sublime_text_3/sublime_text -a '

# utils
# https://github.com/athityakumar/colorls
if _has exa; then
  alias lx='exa --color=always --group-directories-first'
  alias lld='exa -lh --color=always --group-directories-first'
  alias lll='exa -lah --color=always --group-directories-first'
  alias ll='exa -lhF --git-ignore --group-directories-first --time-style=long-iso'
  alias lt='exa -aT --color=always --group-directories-first' # tree listing
  alias la='ll -a'
  alias exa2='exa -alhF --git-ignore --group-directories-first --time-style=long-iso -T -L=2 --ignore-glob=".git|node_modules"'
fi
if _has lsd; then
  alias lct2='lsd -t --tree=2 --group-dirs=first'
  alias lc='lsd -lhA --group-dirs=first'
  if ! _has l; then
    alias l=lsd
  fi
fi
alias lcgt2='colorls --gs -t --tree=2 --sd'
alias  k='k -h'
# Pipe Aliases
alias -g V='| vim -'
alias -g NE='2> /dev/null'
alias -g NUL='&> /dev/null'
alias -g W=' | writecmd '
alias -g S=' | sort '
alias -g P=' | peco '

# kill process fuzzy search with ~/.dotfiles/tools/sk (skim)
alias pskl='ps aux | sk | awk "{ print \$2 }" | xargs kill -9'
# list processes
alias qp="ps auxwww|more"

alias rofim='rofi -show window -sidebar-mode \
  -modi run,window,drun,keys \
  -hide-scrollbar true \
  -bw 2 \
  -lines 12 \
  -padding 24 \
  -width 60 \
  -location 0 \
  -columns 2 \
  -font "Noto Sans 9" \
  -color-enabled true
'

alias l.="ls -A | egrep '^\.' "
alias l..='cd .. && l'
alias ez="$EDITOR $HOME/.zshrc"
alias ezf="$EDITOR $HOME/.zshfunc.custom"
alias ezc="$EDITOR $HOME/.zshrc.custom"
alias ezp='vim /home/sm/.profile'

# bulk association
alias -s {tex,md,rmd,txt,custom}=vil
alias -s {mp3,m4a,flac}="mpv"
alias -s {png,jpg,tiff,bmp,jpeg}="sxiv"

if [ -f /usr/bin/pacman ]; then
  alias pkglist="pacman -Qneq > ~/Code/$(date +"%Y-%m-%d-@%H-%M")-pkglist.txt"
fi
  alias aurlist="pacman -Qmeq > ~/Code/$(date +"%Y-%m-%d-@%H-%M")-aurlist.txt"

##   1}}}

# pmy go fzf helper  Ctrl-<Space>
# [ -f $HOME/.dotfiles/tools/pmy ] && eval "$(pmy init)"

# navi cli cheat completion utility Ctrl+G
if [ -e $HOME/.config/navi ]; then
  source <(navi widget zsh)
fi

# buku bookmarks with fzf
if _has opera ; then
  BROWSER=opera
  alias bb='$BROWSER $(buku -p -f 10 | sk)'
else
  alias bb='$BROWSER $(buku -p -f 10 | sk)'
fi

# sxhkd help page show
alias bspk="~/.config/sxhkd/show_help.sh"

# Calendar vim notes show for today yestoday and all peco select
alias ntod='vi ~/Sync/smNotes/$(date "+%Y-%m-%d").md'
alias nytod='vi ~/Sync/smNotes/$(ls ~/Sync/smNotes | sort | tail -n 1)'
alias npec='glow ~/Sync/smNotes/$(ls ~/Sync/smNotes | sort | peco)'

# youtube-dl
alias yta-aac="youtube-dl --extract-audio --audio-format aac "
alias yta-best="youtube-dl --extract-audio --audio-format best "
alias yta-flac="youtube-dl --extract-audio --audio-format flac "
alias yta-m4a="youtube-dl --extract-audio --audio-format m4a "
alias yta-mp3="youtube-dl --extract-audio --audio-format mp3 "
alias yta-opus="youtube-dl --extract-audio --audio-format opus "
alias yta-vorbis="youtube-dl --extract-audio --audio-format vorbis "
alias yta-wav="youtube-dl --extract-audio --audio-format wav "
alias ytv-best="youtube-dl -f bestvideo+bestaudio "


## desk: Peco Functions (Ctrl+xf, Ctrl+xr, Ctrl+x+Ctrl+f,Ctrl+x+Ctrl+k,Ctrl+x+Ctrl+b,Ctrl+x+Ctrl+g)
function peco-files() {
  local current_lbuffer="$LBUFFER"
  local current_rbuffer="$RBUFFER"
  if command -v fd >/dev/null 2>&1; then
    local file="$(command fd --type file --hidden --no-ignore --exclude .git/ --color never 2>/dev/null | peco)"
  elif command -v rg >/dev/null 2>&1; then
    local file="$(rg --glob "" --files --hidden --no-ignore-vcs --iglob !.git/ --color never 2>/dev/null | peco)"
  elif command -v ag >/dev/null 2>&1; then
    local file="$(ag --files-with-matches --unrestricted --skip-vcs-ignores --ignore .git/ --nocolor -g "" 2>/dev/null | peco)"
  else
    local file="$(
    command find \( -path '*/\.*' -o -fstype dev -o -fstype proc \) -type f -print 2> /dev/null \
      | sed 1d \
      | cut -b3- \
      | awk '{a[length($0)" "NR]=$0}END{PROCINFO["sorted_in"]="@ind_num_asc"; for(i in a) print a[i]}' - \
      | peco
    )"
  fi

  if [ -n "$file" ]; then
    file=$(echo "$file" | tr --delete '\n')
    file=$(printf %q "$file")
    BUFFER="${current_lbuffer}${file}${current_rbuffer}"
    CURSOR=$#BUFFER
  fi
}
zle -N peco-files
bindkey '^Xf' peco-files

#if [[ -z "$ZSH_CDR_DIR" ]]; then
#  ZSH_CDR_DIR="${XDG_DATA_HOME:-$HOME/.local/share}/zsh/cdr"
#fi
#mkdir --parents "$ZSH_CDR_DIR"

#autoload -Uz chpwd_recent_dirs cdr
#autoload -U add-zsh-hook
#add-zsh-hook chpwd chpwd_recent_dirs
#zstyle ':chpwd:*' recent-dirs-file "$ZSH_CDR_DIR"/recent-dirs
#zstyle ':chpwd:*' recent-dirs-max 1000
# fall through to cd
#zstyle ':chpwd:*' recent-dirs-default yes


# anyframeのセットアップ
#zinit light mollifier/anyframe
# Ctrl+x -> b
# peco でディレクトリの移動履歴を表示
bindkey '^x^f' anyframe-widget-cdr
autoload -Uz chpwd_recent_dirs cdr add-zsh-hook
add-zsh-hook chpwd chpwd_recent_dirs

# Ctrl+x -> r
# peco でコマンドの実行履歴を表示
bindkey '^xr' anyframe-widget-execute-history

# Ctrl+x -> Ctrl+b
# peco でGitブランチを表示して切替え
bindkey '^x^b' anyframe-widget-checkout-git-branch

# Ctrl+x -> Ctrl+k
# peco kill process
bindkey '^x^k' anyframe-widget-kill

# Ctrl+x -> Ctrl+g
# peco kill process
bindkey '^x^g' anyframe-widget-select-widget

###Random colorscript
if [ -f /opt/shell-color-scripts/colorscript.sh ]; then
    sleep 0.2
    /opt/shell-color-scripts/colorscript.sh random
    alias d='/opt/shell-color-scripts/colorscript.sh random'
fi

alias cdf=cd_with_fzf
alias s="syscheck"
alias fbfd="fd . ~/Sync/diary/ --extension cal | fzfv "    #fzf --no-multi --preview 'bat --color=always -l yaml --line-range :200 {}' "
