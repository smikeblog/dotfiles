#settings

# Basic vars
set previewer ~/.config/lf/lib/preview
set color256
set icons

set EDITOR vim

# interpreter for shell commands (needs to be POSIX compatible)
set shell sh

set shellopts '-e:--shwordsplit'

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# use enter for shell commands
map <enter> shell

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open ${{
    case $(file --mime-type $f -b) in
        image/vnd.djvu|application/pdf|application/octet-stream) setsid zathura $fx >/dev/null 2>&1 & ;;
        text/troff) man ./ $f;;
        text/*) $EDITOR $fx;;
	    image/x-xcf|image/svg+xml) setsid gimp $f >/dev/null 2>&1 & ;;
	    image/*) rotdir $f | setsid sxiv -ai >/dev/null 2>&1 & ;;
	    audio/*) mpv --input-ipc-server=/tmp/mpvsoc$(date +%%s) $f ;;
	    video/*) setsid mpv --input-ipc-server=/tmp/mpvsoc$(date +%%s) $f -quiet >/dev/null 2>&1 & ;;
	    application/pdf) setsid zathura $fx >/dev/null 2>&1 & ;;
        *) for f in $fx; do setsid $OPENER $f >/dev/null 2>&1 & done;;
    esac
}}


# rename current file without overwrite
cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
map rr push :rename<space>

# make sure trash folder exists
%mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash %set -f; mv $fx ~/.trash

# delete current file or selected files (prompting)
cmd delete ${{
    set -f
    printf "%s\n\t" "$fx"
    printf "delete?[y/N]"
    read ans
    [ $ans = "y" ] && rm -rf $fx
}}

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

cmd fzf_jump ${{
   res="$(fd -a | fzf --reverse --header='Jump to location')"
      if [ -f "$res" ]; then
           cmd="select"
	      elif [ -d "$res" ]; then
	cmd="cd"
      fi
   lf -remote "send $id $cmd \"$res\""
}}


# Bindings
map za    # delete za setting map za set info size:time
map za set hidden!
map zv set info size:time
map <c-f> :fzf_jump
#map c $lf -remote "send $id cd $(cut -d'	' -f2 ~/.config | fzf)"
#map J $lf -remote "send $id cd $(cut -d'	' -f2 ~/.config | fzf)"
map g top
map D delete
#map C copyto
#map M moveto
map a push %mkdir<space>
map <enter> shell
map R reload
map x $$f
map X !$f
map o &mimeopen $f
map O $mimeopen --ask $f


# execute current file (must be executable)
#map x $$f
#map X !$f

# dedicated keys for file opener actions
# map o &mimeopen $f
#map o &rifle $f
#map O $mimeopen --ask-default $f

cmd aj %lf -remote "send $id cd '$(autojump $1)'"
map A push :aj<space>

# Unmap the default binding
map r
# Rename the file with a completely different name
map rc push :rename<space>
# Edit the current filename
map ra ${{
	# get 'basename' of the selection
	filename="${f##*/}"
	# quote it so we won't deal with quotes in the lf -remote command
	filename="$(printf '%q' "$filename")"
	filename="${filename// /<space>}"
	lf -remote "send $id push :rename<space>$filename"
}}
# Edit filename before the extension
map re ${{
	# get 'basename' of the selection
	filename="${f##*/}"
	# quote it so we won't deal with quotes in the lf -remote command
	filename="$(printf '%q' "$filename")"
	filename="${filename// /<space>}"
	lf -remote "send $id push :rename<space>$filename<a-b><c-b>"
}}


## Unmap the default mapping so the rest of the following mapping won't collide
#map r
# Simple rename:
map rc push :rename<space>
# Rename with the filename on the command line
#map ra $lf -remote "send $id push :rename<space>$f"
# Rename with the filename without the extension
#map re $lf -remote "send $id push :rename<space>$f<a-b><a-d>"

## <Ctrl+f> - jump to a file or directory in lf using fuzzy matching
cmd fzf_jump ${{
   res="$(find . -maxdepth 1 | fzf --reverse --header='Jump to location')"
   if [ -f "$res" ]; then
     cmd="select"
   elif [ -d "$res" ]; then
     cmd="cd"                                                       
   fi
lf -remote "send $id $cmd \"$res\""
}}
map <c-f> :fzf_jump


