
import subprocess
import os
from qutebrowser.api import interceptor
# ================== Youtube Add Blocking ======================= {{{
def filter_yt(info: interceptor.Request):
    """Block the given request if necessary."""
    url = info.request_url
    if (
        url.host() == "www.youtube.com"
        and url.path() == "/get_video_info"
        and "&adformat=" in url.query()
    ):
        info.block()


interceptor.register(filter_yt)
# }}}
# Autogenerated config.py
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

# Uncomment this to still load settings configured via autoconfig.yml
config.load_autoconfig()

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'file://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome://*/*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'qute://*/*')

# ,m opens page with mpv
config.bind('M', 'hint links spawn mpv {hint-url}')
config.bind('Z', 'hint links spawn st -e youtube-dl {hint-url}')
config.bind('t', 'set-cmd-text -s :open -t')

config.bind(',l', 'spawn --detach open-youtube {url}')
# ,M hints and oens choice with mpv
config.bind(',L', 'hint links spawn --detach open-youtube {hint-url}')
config.bind('<Ctrl-Shift-y>', 'hint links spawn --detach mpv --hwdec=vdpau --force-window yes {hint-url}')

# Opens a url with zathura - this is only really useful if the url is a pdf
config.bind(',z', 'hint links spawn --detach zathura {hint-url}')

# Shows QR code for current page
config.bind(',q', 'spawn --detach qrcode {url}')
# Shows QR code for chosen link
config.bind(',Q', 'hint links spawn --detach qrcode {hint-url}')

# Position of the tab bar.
# Type: Position
# Valid values:
#   - top
#   - bottom
#   - left
#   - right
c.tabs.position = 'left'

c.tabs.show = 'switching'

config.bind('xt', 'config-cycle tabs.show always never')

# Width (in pixels or as percentage of the window) of the tab bar if
# it's vertical.
# Type: PercOrInt
c.tabs.width = '3%'

# Maximum width (in pixels) of tabs (-1 for no maximum). This setting
# only applies when tabs are horizontal. This setting does not apply to
# pinned tabs, unless `tabs.pinned.shrink` is False. This setting may
# not apply properly if max_width is smaller than the minimum size of
# tab contents, or smaller than tabs.min_width.
# Type: Int
c.tabs.max_width = 20

# Font used in the tab bar.
# Type: QtFont
c.fonts.tabs = '8pt monospace'


##  mmmm                              #              mmmm  #                      m                    m
## #"   "  mmm    mmm    m mm   mmm   # mm          #"   " # mm    mmm    m mm  mm#mm   mmm   m   m  mm#mm   mmm
## "#mmm  #"  #  "   #   #"  " #"  "  #"  #         "#mmm  #"  #  #" "#   #"  "   #    #"  "  #   #    #    #   "
##     "# #""""  m"""#   #     #      #   #             "# #   #  #   #   #       #    #      #   #    #     """m
## "mmm#" "#mm"  "mm"#   #     "#mm"  #   #         "mmm#" #   #  "#m#"   #       "mm  "#mm"  "mm"#    "mm  "mmm"

# Google
c.url.searchengines['goog'] = 'https://google.com/search?q={}'
# Arch User Repository
c.url.searchengines['aur'] = 'https://aur.archlinux.org/packages/?O=0&K={}'
# Arch Wiki
c.url.searchengines['aw'] = 'https://wiki.archlinux.org/?search={}'
# Can I Use
c.url.searchengines['ciu'] = 'https://caniuse.com/#search={}'
# GitHub
c.url.searchengines['gh'] = 'https://github.com/search?q={}'
# Youtube
c.url.searchengines['yt'] = 'https://www.youtube.com/results?search_query={}'
# Wikipedia
c.url.searchengines['wiki'] = 'https://en.wikipedia.org/wiki/{}'


c.hints.selectors["table"] = [
    "table"
]

c.aliases['burp'] = 'set content.proxy http://127.0.0.1:8080/'
c.aliases['noburp'] = 'set content.proxy system'
c.aliases['mystyles'] = 'set content.user_stylesheets ~/.local/share/qutebrowser/userstylesheets/default.css'
c.aliases['nomystyles'] = 'set content.user_stylesheets ""'
stylesheetdir='~/.local/share/qutebrowser/userstylesheets/'
c.content.user_stylesheets = [stylesheetdir + 'default.css']

#with config.pattern('*://github.com/') as p:
#    p.content.user_stylesheets = [stylesheetdir + 'github.css']

config.source('nord-qutebrowser.py')
#import dracula.draw

#dracula.draw.blood(c, {
#    'spacing': {
#        'vertical': 6,
#        'horizontal': 8
#    }
#})

