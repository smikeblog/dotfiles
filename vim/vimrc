" utf8=✔ 👍

" **** BASIC **** "

call plug#begin('~/.vim/plugged')

" On-demand loading
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'othree/html5.vim', { 'for': ['html', 'php'] }
Plug 'cakebaker/scss-syntax.vim'
Plug 'editorconfig/editorconfig-vim'
Plug 'leafgarland/typescript-vim'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'Valloric/YouCompleteMe', { 'do': './install.py --go-completer --rust-completer --clang-completer --system-libclang' }
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'Yggdroot/indentLine'
Plug 'elzr/vim-json'
Plug 'posva/vim-vue'
Plug 'Quramy/tsuquyomi'
Plug 'Quramy/tsuquyomi-vue'
Plug 'w0rp/ale'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'airblade/vim-gitgutter'
Plug 'ElmCast/elm-vim'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rails'
Plug 'pangloss/vim-javascript'
Plug 'jparise/vim-graphql'
Plug 'mxw/vim-jsx'
Plug 'vim-scripts/dbext.vim'
Plug 'jwalton512/vim-blade'
Plug 'junegunn/vader.vim'
Plug 'ryanoasis/vim-devicons'
Plug 'habamax/vim-asciidoctor'
Plug 'aonemd/kuroi.vim'
Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'tpope/vim-commentary'
Plug 'vifm/vifm.vim'
" post install (yarn install | npm install)
Plug 'prettier/vim-prettier', { 'do': 'yarn install' }
Plug 'ptzz/lf.vim'

"Plug 'scrooloose/syntastic'
"Plug 'joonty/vdebug'
"
"Plug '~/Projects/vim/vim-tasklist-asciidoctor'

"'file:///~/.vim/bundle/dbext'
"'file:///~/.vim/bundle/vim-uploader'

call plug#end()

filetype plugin indent on
syntax on
set nocompatible
packadd! matchit
set omnifunc=syntaxcomplete#Complete
set number
set rnu
set ruler
set showcmd
set hidden
set scrolloff=3
set timeoutlen=350
set mouse=a

" Indentation with SPACES
set tabstop=2 softtabstop=2 shiftwidth=2 expandtab

set breakindent

set sessionoptions=blank,buffers,curdir,folds,help,options,tabpages,winsize,resize,localoptions

let g:netrw_browsex_viewer= 'xdg-open'

"let mapleader = "_"
let mapleader=","

set history=999
set undolevels=99

set encoding=utf-8
set fileencoding=utf-8

set wildmenu
set wildmode=longest:full,full

" All three settings are necessary to avoid noise... "
set noerrorbells
set noerrorbells visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=

set backup
set backupdir=~/Temp/vim_bkp/
set backupext=.vimbkp
set directory=~/Temp/vim_tmp//


" Restore cursor position (:help restore-cursor).
autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

set listchars=tab:▸\ ,trail:·,eol:¬,nbsp:_
set listchars=tab:▸\ ,trail:·
set list

" log, tmp, vendor, bin, libs and some other stuff are rails
" specific directories.
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.*(git|hg|svn|log|tmp|vendor|bin|node_modules|lsm|gerenciador)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ }

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

"let g:syntastic_elm_checkers = ['elm_make']
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:tsuquyomi_disable_quickfix = 1
let g:syntastic_typescript_checkers = ['tsuquyomi']
let g:elm_syntastic_show_warnings = 1

" Disable for typescript since it already provides syntax checking
" stuff and other things. All other filetypes still run syntax checking
" by default.
let g:syntastic_mode_map = {
    \ 'mode': 'active',
    \ 'passive_filetypes': ['typescript'] }

" CtrlP "
" change default mapping "
let g:ctrlp_map = '<c-;>'

nnoremap <Leader>f :CtrlP<CR>
inoremap <Esc><Leader>f :CtrlP<CR>

nnoremap <Leader>b :CtrlPBuffer<CR>
inoremap <Esc><Leader>b :CtrlPBuffer<CR>

nnoremap <Leader>m :CtrlPMixed<CR>
inoremap <Esc><Leader>m :CtrlPMixed<CR>

"
" IndentLine
"
let g:indentLine_color_term = 235 "'darkgray'
let g:indentLine_char = '¦' "'·'
" indentLine uses conceal stuff which together with default json.vim
" hides quotes in json files. People suggest stuff here:
" https://github.com/Yggdroot/indentLine/issues/140#issuecomment-173867054
"

"
" json-vim
"
" Also to help with indentLin + json.vim hiding quotes from json files.
let g:vim_json_syntax_conceal = 0


"
" NERDTree
"
let g:lf_map_keys = 0
map <leader>f :Lf<CR>

nnoremap <F3> :NERDTreeToggle<CR>
inoremap <F3> <Esc>:NERDTreeToggle<CR>
nnoremap <Leader>nf :NERDTreeFind<CR>
let NERDTreeIgnore = ['\~$', 'node_modules', 'public/assets', 'public/fonts', 'public/uploads', 'public/images']

" Save the file (some terminals get locked on ctrl-s, and ctrl-q unlocks).
" # We don't want C-s to lock and terminal (which is unlocked with C-q).
" `stty -ixon` on bashrc
nnoremap <C-s> :update<CR>
inoremap <C-s> <Esc>:update<CR><Right>

" open the omnicompletion manually
inoremap <C-Space> <C-x><C-o>

" Mapping for tabpages "
map <C-N> :tabnext<Return>
map <C-P> :tabprevious<Return>

" Insert a nice formated data and time:
inoremap <F2> <C-r>=strftime('%A, %H:%M - %B %d - %Y')

" Clears the current search
nnoremap <silent> <C-l> :nohlsearch<CR><C-l>

" Change directory to the path of current file/buffer.
nnoremap cd :cd %:h<CR>:pwd<CR>


if hostname() == 'sm1-pc' || hostname() == 'vbsmidiawork1'
"    colorscheme mytheme1
    colorscheme gruvbox
    highlight Visual ctermbg=235 " For dark backgrounds.
else
"    colorscheme mytheme1
    colorscheme gruvbox
endif

set background=dark
" mate-terminal default config.
"if $TERM == 'xterm'
"    highlight MatchParen cterm=reverse ctermbg=NONE ctermbg=NONE
"elseif $TERM == 'rxvt-unicode-256color'
"    highlight MatchParen ctermbg=2 ctermfg=white
"endif

"highlight Visual ctermbg=233
"highlight PmenuSel ctermbg=yellow ctermfg=white
"highlight Comment ctermfg=4
"highlight Constant ctermfg=1


if !exists("g:ycm_semantic_triggers")
  let g:ycm_semantic_triggers = {
              \ 'elm': ['.'],
              \ 'typescript': ['.']}
endif

if hostname() == 'theforce'
  let g:ycm_server_python_interpreter = '/usr/bin/python3'
end

let html_no_rendering = 1

autocmd BufReadPost *.twig set filetype=html

"
" Number sections #[Qn]# to #[Q1]#, #[Q2]#, #[Q3]#, etc.
" Also for id='Qn' and <<Qn>>.
"
function! NumberQuestions()

    "let i = 1 | g/#\[Q.\+\]#/s//\='#[Q'.i.']#'/ | let i = i + 1

    "
    " Go to the top of the file.
    "
    normal gg

    "
    " Works for id='Qn'
    "
    let i = 1 | g/id='Q.\+'/s//\="id='Q".i."'"/ | let i = i + 1

    "
    " Works for <<Qn>>
    "
    let i = 1 | g/<<Q.\+>>/s//\="<<Q".i.">>"/ | let i = i + 1

    update

endfunction


"
" AIRLINE
"
set laststatus=2
let g:airline_powerline_fonts = 1

"
" YCM
"
" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
"let g:SuperTabDefaultCompletionType = '<C-n>'

"
" UltiSnips
"
" All these three combined work for my custom snippets with custom location
" to work fine.
"
set runtimepath+=~/.vim/FILES/vim
let g:UltiSnipsSnippetsDir = "~/.vim/myultisnips"
let g:UltiSnipsSnippetDirectories = ["UltiSnips", "myultisnips"]

" Problem: on terminals, c-tab sends tab, and tab is bound to ycm.
" s-tab doesn't work either in the terminal (urxvt at least).
let g:UltiSnipsEditSplit="horizontal"
let g:UltiSnipsExpandTrigger="<Tab>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
" https://github.com/Valloric/YouCompleteMe/issues/420#issuecomment-55940039

"
" Vim-Uploader
"
"let g:VimUploaderHostsFile = '~/VBSMidia/WorkDATA/vimftpconf/remote-hosts.vim'

"
" ALE
"

let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_enter = 1
let g:ale_lint_on_save = 1

" Disable ALE for .c and .h files. YCM seems to be doing
" some linting on its own, or something else is...
let g:ale_pattern_options = {
    \ '.*\.c$': { 'ale_enabled': 0 },
    \ '.*\.h$': { 'ale_enabled': 0 },
\ }


"
" habamax/vim-asciidoctor
"
"
" Fold sections, default `0`.
let g:asciidoctor_folding = 1

" Fold options, default `0`.
let g:asciidoctor_fold_options = 1

let g:asciidoctor_fenced_languages = ['python', 'c', 'javascript', 'ruby', 'go', 'rust', 'haskell', 'bash', 'sh']

"
" VORG
"

" posva/vim-vue
"
" https://github.com/posva/vim-vue#my-syntax-highlighting-stops-working-randomly
autocmd FileType vue syntax sync fromstart

"
" pangloss/vim-javascript
"
"" map for tpope/vim-commentary
noremap <leader>/ :Commentary<cr>


let g:javascript_plugin_jsdoc = 1
"augroup javascript_folding
"    au!
"    au FileType javascript setlocal foldmethod=syntax
"    let g:javascript_plugin_jsdoc = 1
"    set foldcolumn=0
"    if !has('gui_running')
"        highlight FoldColumn ctermbg=232
"    else
"        highlight FoldColumn guibg=bg
"    endif
"augroup END

" Ctrl+O vifm vert split open
nnoremap <silent> <F4> :VsplitVifm<cr>

" CUSTOM HELPERS
"
source ~/.vim/helpers/redir.vim



" When completion menu is shown, use <cr> to select an item
" and do not add an annoying newline. Otherwise, <enter> is what it is.
" For more info , see https://goo.gl/KTHtrr and https://goo.gl/MH7w3b
inoremap <expr> <cr> ((pumvisible())?("\<C-Y>"):("\<cr>"))
" Use <esc> to close auto-completion menu
inoremap <expr> <esc> ((pumvisible())?("\<C-e>"):("\<esc>"))

