" vim: filetype=vifm :
" Sample configuration file for vifm (last updated: 20 July, 2018)
" You can edit this file by hand.
" The " character at the beginning of a line comments out the line.
" Blank lines are ignored.
" The basic format for each item is shown with an example.

" ------------------------------------------------------------------------------

" This is the actual command used to start vi.  The default is vim.
" If you would like to use another vi clone such as Elvis or Vile
" you will need to change this setting.

set vicmd=nv
"set vicmd="nvim -u ~/.vil/init.vim"
" set vicmd=elvis\ -g\ termcap

" this makes vifm perform file operations on its own instead of relying on
" standard utilities like `cp`.  while using `cp` and alike is a more universal
" solution, it's also much slower when processing large amounts of files and
" doesn't support progress measuring.

set syscalls

" trash directory
" the default is to move files that are deleted with dd or :d to
" the trash directory.  if you change this you will not be able to move
" files by deleting them and then using p to put the file in the new location.
" i recommend not changing this until you are familiar with vifm.
" this probably shouldn't be an option.

set trash

" this is how many directories to store in the directory history.

set history=100

" automatically resolve symbolic links on l or enter.

set nofollowlinks

" with this option turned on you can run partially entered commands with
" unambiguous beginning using :! (e.g. :!te instead of :!terminal or :!te<tab>).

" set fastrun

" natural sort of (version) numbers within text.

set sortnumbers

" maximum number of changes that can be undone.

set undolevels=100

" if you installed the vim.txt help file set vimhelp.
" if would rather use a plain text help file set novimhelp.

set novimhelp

" if you would like to run an executable file when you
" press return on the file name set this.

set norunexec

" selected color scheme

" colorscheme default
" colorscheme dracula.vifm
colorscheme zenburn_1sm.vifm

" format for displaying time in file list. for example:
" time_stamp_format=%m/%d-%h:%m
" see man date or man strftime for details.

set timefmt=%m/%d\ %h:%m

" show list of matches on tab completion in command-line mode

set wildmenu

" display completions in a form of popup with descriptions of the matches

set wildstyle=popup

" display suggestions in normal, visual and view modes for keys, marks and
" registers (at most 5 files).  in other view, when available.

set suggestoptions=normal,visual,view,otherpane,keys,marks,registers

" ignore case in search patterns unless it contains at least one uppercase
" letter

set ignorecase
set smartcase

" don't highlight search results automatically

set nohlsearch

" use increment searching (search while typing)
set incsearch

" try to leave some space from cursor to upper/lower border in lists

set scrolloff=4

" don't do too many requests to slow file systems

if !has('win')
    set slowfs=curlftpfs
endif

" set custom status line look

" set statusline="  hint: %z%= %a %10u:%-7g %15E %20d  "
set statusline="  hint: %z%= %a %10u:%-7g %15s:%E %20d  "
" set statusline='  %t%= %A %10u:%-7g %15E %20d  '
" ------------------------------------------------------------------------------

" :mark mark /full/directory/path [filename]

mark r /
mark h ~/
mark b ~/bin/
mark w ~/Blog/
mark s ~/.dotfiles/
mark l ~/.local/
mark c ~/Code
mark d ~/Downloads
mark p ~/Pictures
mark t ~/Templates
mark v ~/Videos

" ------------------------------------------------------------------------------

" :com[mand][!] command_name action
" the following macros can be used in a command
" %a is replaced with the user arguments.
" %c the current file under the cursor.
" %c the current file under the cursor in the other directory.
" %f the current selected file, or files.
" %f the current selected file, or files in the other directory.
" %b same as %f %f.
" %d the current directory name.
" %d the other window directory name.
" %m run the command in a menu window

command! df df -h %m 2> /dev/null
command! diff vim -d %f %f
command! zip zip -r %f.zip %f
command! run !! ./%f
command! make !!make %a
command! mkcd :mkdir %a | cd %a
command! vgrep vim "+grep %a"
command! reload :write | restart

" ------------------------------------------------------------------------------
" cmpinternal — a trick to invoke external command. Calling execute "!compare-cmd ... %S" reparses command-line which leads to loosing results of command execution (they are overwritten by execution of if-else-endif block).
" Double percent sign in arguments for the expand() function (e.g. expand('%%c')) — macros are automatically expanded for user-defined commands, so % symbol should be escaped with itself for expansion to be performed by expand() function. It's important as otherwise unescaped quotes or other special characters in file names can break command syntax.
" expand('%%c') == expand('%%f') — check whether only one file is selected in current pane.
"Run :cmp without selection or with single file selection to compare files under cursors in two panes.
"Run :cmp after selecting two files in the current pane to compare them.
   command! cmpinternal compare-cmd %a %S
   command! cmp : if expand('%%c') == expand('%%f')
              \ |     echo expand('Comparing %%"c and %%"C:t ...')
              \ |     cmpinternal %c %C
              \ | else
              \ |     echo expand('Comparing files: %%"f ...')
              \ |     cmpinternal %f
              \ | endif

" ------------------------------------------------------------------------------

" the file type is for the default programs to be used with
" a file extension.
" :filetype pattern1,pattern2 defaultprogram,program2
" :fileviewer pattern1,pattern2 consoleviewer
" the other programs for the file type can be accessed with the :file command
" the command macros %f, %f, %d, %f may be used in the commands.
" the %a macro is ignored.  to use a % you must put %%.

" for automated fuse mounts, you must register an extension with :file[x]type
" in one of following formats:
"
" :filetype extensions fuse_mount|some_mount_command using %source_file and %destination_dir variables
" %source_file and %destination_dir are filled in by vifm at runtime.
" a sample line might look like this:
" :filetype *.zip,*.jar,*.war,*.ear fuse_mount|fuse-zip %source_file %destination_dir
"
" :filetype extensions fuse_mount2|some_mount_command using %param and %destination_dir variables
" %param and %destination_dir are filled in by vifm at runtime.
" a sample line might look like this:
" :filetype *.ssh fuse_mount2|sshfs %param %destination_dir
" %param value is filled from the first line of file (whole line).
" example first line for sshmount filetype: root@127.0.0.1:/
"
" you can also add %clear if you want to clear screen before running fuse
" program.

" pdf
    fileviewer *.pdf
        \ vifmimg pdf %px %py %pw %ph %c
        \ %pc
        \ vifmimg clear

    fileviewer *.epub
        \ vifmimg epub %px %py %pw %ph %c
        \ %pc
        \ vifmimg clear

    fileviewer <video/*>
        \ vifmimg video %px %py %pw %ph %c
        \ %pc
        \ vifmimg clear

    fileviewer <image/*>
        \ vifmimg draw %px %py %pw %ph %c
        \ %pc
        \ vifmimg clear

    fileviewer <audio/*>
        \ vifmimg audio %px %py %pw %ph %c
        \ %pc
        \ vifmimg clear

    fileviewer <font/*>
        \ vifmimg font %px %py %pw %ph %c
        \ %pc
        \ vifmimg clear



filextype *.pdf zathura %c %i &, apvlv %c, xpdf %c
"fileviewer *.pdf pdftotext -nopgbrk %c -

" postscript
filextype *.ps,*.eps,*.ps.gz
        \ {view in zathura}
        \ zathura %f,
        \ {view in gv}
        \ gv %c %i &,

" djvu
filextype *.djvu
        \ {view in zathura}
        \ zathura %f,
        \ {view in apvlv}
        \ apvlv %f,

" audio
filetype *.wav,*.mp3,*.flac,*.m4a,*.wma,*.ape,*.ac3,*.og[agx],*.spx,*.opus
       \ {play using ffplay}
       \ ffplay -nodisp -autoexit %c,
       \ {play using mplayer}
       \ mplayer %f,
"fileviewer *.mp3 mp3info
"fileviewer *.flac soxi

" video
filextype *.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
         \*.fl[icv],*.m2v,*.mov,*.webm,*.ts,*.mts,*.m4v,*.r[am],*.qt,*.divx,
         \*.as[fx]
        \ {view using mpv}
        \ mpv -fs %f,
        \ {view using ffplay}
        \ ffplay -fs -autoexit %f,
        \ {view using mplayer}
        \ mplayer %f,
"fileviewer *.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
"          \*.fl[icv],*.m2v,*.mov,*.webm,*.ts,*.mts,*.m4v,*.r[am],*.qt,*.divx,
"          \*.as[fx]
"         \ ffprobe -pretty %c 2>&1

" web
filextype *.html,*.htm
        \ {open with dwb}
        \ dwb %f %i &,
        \ {open with firefox}
        \ firefox %f &,
        \ {open with uzbl}
        \ uzbl-browser %f %i &,
filetype *.html,*.htm links, lynx

" object
filetype *.o nm %f | less

" man page
filetype *.[1-8] man ./%c
fileviewer *.[1-8] man ./%c | col -b

" images
"filextype *.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm
"        \ {view in sxiv}
"        \ rotdir %f | setsid sxiv -ai >/dev/null 2>&1 &,
"        \ {view in gpicview}
"        \ gpicview %c,
"        \ {view in shotwell}
"        \ shotwell,
" fileviewer *.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm
"         \ convert -identify %f -verbose /dev/null
"fileviewer *.jpg,*.jpeg,*.png,*.ico,*.gif vifmimg draw %px %py %pw %ph %c %pc vifmimg clear
filextype *.jpeg,*.jpg,*.png
    \ {Open With sxiv}
    \ sxiv %c &

" openraster
filextype *.ora
        \ {edit in mypaint}
        \ mypaint %f,

" mindmap
filextype *.vym
        \ {open with vym}
        \ vym %f &,

" md5
filetype *.md5
       \ {check md5 hash sum}
       \ md5sum -c %f %s,

" sha1
filetype *.sha1
       \ {check sha1 hash sum}
       \ sha1sum -c %f %s,

" sha256
filetype *.sha256
       \ {check sha256 hash sum}
       \ sha256sum -c %f %s,

" sha512
filetype *.sha512
       \ {check sha512 hash sum}
       \ sha512sum -c %f %s,

" gpg signature
filetype *.asc
       \ {check signature}
       \ !!gpg --verify %c,

" torrent
filetype *.torrent ktorrent %f &
fileviewer *.torrent dumptorrent -v %c

" fusezipmount
filetype *.zip,*.jar,*.war,*.ear,*.oxt,*.apkg
	\ {open with file-roller}
	\ file-roller %f &,
""       \ {mount with fuse-zip}
""       \ fuse_mount|fuse-zip %source_file %destination_dir,
       \ {view contents}
       \ zip -sf %c | less,
       \ {extract here}
       \ tar -xf %c,
fileviewer *.zip,*.jar,*.war,*.ear,*.oxt zip -sf %c

" archivemount
filetype *.tar,*.tar.bz2,*.tbz2,*.tgz,*.tar.gz,*.tar.xz,*.txz
	\ {open with file-roller}
	\ file-roller %f &,
"""       \ {mount with archivemount}
"       \ fuse_mount|archivemount %source_file %destination_dir,
fileviewer *.tgz,*.tar.gz tar -tzf %c
fileviewer *.tar.bz2,*.tbz2 tar -tjf %c
fileviewer *.tar.txz,*.txz xz --list %c
fileviewer *.tar tar -tf %c

" rar2fsmount and rar archives
filetype *.rar
	\ {open with file-roller}
	\ file-roller %f &,
""       \ {mount with rar2fs}
""       \ fuse_mount|rar2fs %source_file %destination_dir,
fileviewer *.rar unrar v %c

" rare formats; only view
fileviewer *.7z 7z l %c

" isomount
""filetype *.iso
""       \ {mount with fuseiso}
""       \ fuse_mount|fuseiso %source_file %destination_dir,

" sshmount
""filetype *.ssh
""       \ {mount with sshfs}
""       \ fuse_mount2|sshfs %param %destination_dir %foreground,

" ftpmount
""filetype *.ftp
""       \ {mount with curlftpfs}
""       \ fuse_mount2|curlftpfs -o ftp_port=-,,disable_eprt %param %destination_dir %foreground,

" fuse7z and 7z archives
""filetype *.7z
""       \ {mount with fuse-7z}
""       \ fuse_mount|fuse-7z %source_file %destination_dir,
"fileviewer *.7z 7z l %c

" office files
filextype *.odt,*.doc,*.docx,*.xls,*.xlsx,*.odp,*.pptx libreoffice %f &
fileviewer *.doc catdoc %c
fileviewer *.docx docx2txt.pl %f -

" tudu files
filetype *.tudu tudu -f %c

" qt projects
filextype *.pro qtcreator %f &

" directories
filextype */
        \ {view in thunar}
        \ pcmanfm %f &,
"        \ thunar %f &,

" 'l' toggles showing a git log of entry (whether it is a directory or a file)
nnoremap l :if &previewprg == '' | set previewprg='git -c color.status=always s; git log --stat --decorate=short --color -- %c 2>&1' | view! | else | set previewprg='' | view | endif<cr>


" syntax highlighting in preview
"
" explicitly set highlight type for some extensions
"
" 256-color terminal
" fileviewer *.[ch],*.[ch]pp highlight -o xterm256 -s dante --syntax c %c
" fileviewer makefile,makefile.* highlight -o xterm256 -s dante --syntax make %c
"
" 16-color terminal
" fileviewer *.c,*.h highlight -o ansi -s dante %c
"
" or leave it for automatic detection
"
" fileviewer *[^/] pygmentize -o style=monokai -f console256 -g

" displaying pictures in terminal
"
" fileviewer *.jpg,*.png shellpic %c

" open all other files with default system programs (you can also remove all
" :file[x]type commands above to ensure they don't interfere with system-wide
" settings).  by default all unknown files are opened with 'vi[x]cmd'
" uncommenting one of lines below will result in ignoring 'vi[x]cmd' option
" for unknown file types.
" for *nix:
" filetype * xdg-open
" for os x:
" filetype * open
" for windows:
" filetype * start, explorer

" ------------------------------------------------------------------------------

" what should be saved automatically between vifm runs
" like in previous versions of vifm
" set vifminfo=options,filetypes,commands,bookmarks,dhistory,state,cs
" like in vi
set vifminfo=dhistory,savedirs,chistory,state,tui,shistory,
    \phistory,fhistory,dirstack,registers,bookmarks,bmarks

" ------------------------------------------------------------------------------
" getting icons to display in vifm
source "$VIFM/scripts/vifm_icons"

" ------------------------------------------------------------------------------

" examples of configuring both panels

" customize view columns a bit (enable ellipsis for truncated file names)
"
" set viewcolumns=-{name}..,6{}.

" filter-out build and temporary files
"
" filter! /^.*\.(lo|o|d|class|py[co])$|.*~$/

" ------------------------------------------------------------------------------

" sample mappings

nnoremap Q :quit<cr>
nnoremap Z :cquit<cr>

"Open directory under the cursor in other pane
nnoremap zt :sync %c<CR><Tab>

" start shell in current directory
nnoremap S :shell<cr>

" display sorting dialog
nnoremap s :sort<cr>

" toggle visibility of preview window
nnoremap w :view<cr>
vnoremap w :view<cr>gv

" open file in existing instance of gvim
"nnoremap o :!gvim --remote-tab-silent %f<cr>
" open in thinkvim and plain nvim
nnoremap ,o :!nvim  %f<cr>
nnoremap ,O :!nvim -N -u NONE -U NONE %f<cr>
" open file in new instance of gvim
" nnoremap o :!gvim %f<cr>

" Open file in the background using its default program
nnoremap gb :file &<cr>l

" Yank current directory path into the clipboard
nnoremap yd :!echo %d | xclip %i<cr>

" Yank current file path into the clipboard
nnoremap yf :!echo %c:p | xclip %i<cr>

" Mappings for faster renaming
nnoremap I cw<c-a>
nnoremap cc cw<c-u>
nnoremap A cw

" Open console in current directory
nnoremap ,t :!st 2>/dev/null &<CR>

" Open editor to edit vifmrc and apply settings after returning to vifm
nnoremap ,c :write | edit $MYVIFMRC | restart<cr>
" Open gvim to edit vifmrc
nnoremap ,C :!gvim --remote-tab-silent $MYVIFMRC &<cr>

" Toggle wrap setting on ,w key
nnoremap ,w :set wrap!<cr>

" Example of standard two-panel file managers mappings
" nnoremap <f3> :!less %f<cr>
" nnoremap <f3> :!bat --paging=always %f<cr>
nnoremap <f3> :!bat --pager "less -RF" --paging=always %f<cr>
nnoremap <f4> :edit<cr>
nnoremap <f5> :copy<cr>
nnoremap <f6> :move<cr>
nnoremap <f7> :mkdir<space>
nnoremap <f8> :delete<cr>

" ------------------------------------------------------------------------------

" Various customization examples

" Use ag (the silver searcher) instead of grep
"
" set grepprg='ag --line-numbers %i %a %s'

" Add additional place to look for executables
"
" let $PATH = $HOME.'/bin/fuse:'.$PATH

" Block particular shortcut
"
" nnoremap <left> <nop>

" Export IPC name of current instance as environment variable and use it to
" communicate with the instance later.
"
" It can be used in some shell script that gets run from inside vifm, for
" example, like this:
"     vifm --server-name "$VIFM_SERVER_NAME" --remote +"cd '$PWD'"
"
" let $VIFM_SERVER_NAME = v:servername

" ===================== FZF
" from https://wiki.vifm.info/index.php/How_to_integrate_fzf_for_fuzzy_finding
command! FZFlocate :set noquickview | :execute 'goto "'.system('locate $HOME | fzf --height 20 2>/dev/tty ').'"%IU' | redraw
command! FZFfind :set noquickview | :execute 'goto "'.system('find | fzf --height 20 2>/dev/tty ').'"%IU' | redraw

" We can then add the following mappings to run these commands from normal mode:
" In this example I have chosen CTRL-g and CTRL-f.

nnoremap <c-g> :FZFlocate<cr>
nnoremap <c-f> :FZFfind<cr>
map fl :FZFlocate<cr>
map fg :FZFfind<cr>

map x :!sxiv -ft * 2>/dev/null &<CR>

" spacebar to select/unselect files
nmap <space> t

" nnoremap cp :!!cp -v -r --parents %f %D<CR>
nnoremap dv :!vimdiff %c %D/%c<CR>
nnoremap dV :!vimdiff %c %C<CR>

windo set viewcolumns=-{name}..,6{size},11{perms}


" vim: filetype=vim:
