#             _   _     _      _
#  __ _  ___ | |_| |__ | | ___| |_ _   _
# / _` |/ _ \| __| '_ \| |/ _ \ __| | | |
#| (_| | (_) | |_| |_) | |  __/ |_| |_| |
# \__, |\___/ \__|_.__/|_|\___|\__|\__,_|
# |___/
#       https://www.youtube.com/user/gotbletu
#       https://twitter.com/gotbletu
#       https://plus.google.com/+gotbletu
#       https://github.com/gotbletu
#       gotbleu@gmail.com

#-------- Common Settings {{{
#------------------------------------------------------
# how to use tmux demo video: http://www.youtube.com/watch?v=ZNM1KfqpyGo
# https://gist.github.com/1147532
# http://crunchbanglinux.org/forums/post/236199/
# https://gist.github.com/adinapoli/4723872
# change prefix key to Ctrl-a; like GNU Screen
unbind-key C-b
set-option -g prefix C-a
bind ` send-prefix

# delta theme color fix from : https://github.com/dandavison/delta
set -ga terminal-overrides ",xterm-256color:Tc"

# goto last used window
bind-key C-a last-window

# Nested Tmux Session
# send to tmux session within another tmux session; like screen
bind-key a send-prefix

# fix delay time between tmux & vim
set-option -sg escape-time 0

# default shell
set-option -g default-command /bin/zsh
set-option -g default-shell /bin/zsh

# reload config
bind-key r source-file ~/.tmux.conf \; display-message "Configuration reloaded"

# edit config
bind-key e new-window -n 'conf' '${EDITOR:-vim} ~/.tmux.conf && tmux source ~/.tmux.conf && tmux display "~/.tmux.conf sourced"'

# clear screen and scrollback history
bind-key -n C-l send-keys C-l \; run 'tmux clear-history'

# set display timelimit
set-option -g display-panes-time 2000
set-option -g display-time 1000

# history size
set-option -g history-limit 20000

# enable shell hotkeys C-left/C-right
# http://sigizmund.com/tmux-and-c-leftc-right/
set-window-option -g xterm-keys on

# enable 256 color terminal
# http://blog.sanctum.geek.nz/256-colour-terminals/
#set-option -g default-terminal "screen-256color"
set-option -g default-terminal "xterm-256color"

#}}}

# =======================================
# Sessions
# ======================================

  # fuzzy find session
bind S split-window -v "tmux list-sessions | sed -E 's/:.*$//' | grep -v \"^$(tmux display-message -p '#S')\$\" | fzf --reverse | xargs tmux switch-client -t"

  # break into new session
bind-key C-b send-keys 'tat && exit' 'C-m'


#-------- Keybinding (Vim Style) {{{
#------------------------------------------------------
# vim keys in command prompt
#set-option -g status-keys vi
# enable vi-mode
setw -g mode-keys vi
set -g status-keys vi

# select panes
bind-key k select-pane -U
bind-key h select-pane -L
bind-key j select-pane -D
bind-key l select-pane -R

# cycle windows/panes (no prefix)
# bind-key -n M-k select-pane -t :.-	# prev pane (Alt+k conflicts with weechat)
bind-key -n M-j select-pane -t :.+	# next pane
bind-key -n M-h select-window -t :-	# previous window
bind-key -n M-l select-window -t :+	# next window

# resize panes
bind-key -r J resize-pane -D 1
bind-key -r K resize-pane -U 1
bind-key -r H resize-pane -L 1
bind-key -r L resize-pane -R 1

# split pane (tmux 1.9+)
#bind-key \\ split-window -h -c "#{pane_current_path}"	# vertical split (default prefix-%)
#bind-key - split-window -v -c "#{pane_current_path}"	# horizontal split (default prefix-")

# split full window (tmux 2.3+)
bind-key | split-window -fh -c "#{pane_current_path}"
bind-key _ split-window -fv -c "#{pane_current_path}"

# new window with the current path (tmux 1.9+)
bind-key c new-window -c "#{pane_current_path}"

# kill window/pane without confirmation
# http://unix.stackexchange.com/a/30283
bind-key & kill-window
bind-key x kill-pane

# sync panes; send what you are typing to other panes.
bind-key C-s set-window-option synchronize-panes

#}}}
#-------- Copy Mode (Vim Style) {{{
#------------------------------------------------------
# This section of hotkeys mainly work in copy mode and no where else

# vim keys in copy and choose mode
set-window-option -g mode-keys vi

# copying selection vim style
# http://jasonwryan.com/blog/2011/06/07/copy-and-paste-in-tmux/
# https://github.com/myfreeweb/dotfiles/blob/master/tmux.conf
bind-key Escape copy-mode			# enter copy mode; default [
bind-key p paste-buffer				# paste; (default hotkey: ] )
bind-key P choose-buffer 			# tmux clipboard history
bind-key + delete-buffer \; display-message "Deleted current Tmux Clipboard History"

# Send To Tmux Clipboard or System Clipboard
bind-key < run-shell "tmux set-buffer -- \"$(xsel -o -b)\"" \; display-message "Copy To Tmux Clipboard"
bind-key > run-shell 'tmux show-buffer | xsel -i -b' \; display-message "Copy To System Clipboard"

# set the current tmux version (use this variable on if-shell commands)
run-shell "tmux set-environment -g TMUX_VERSION $(tmux -V | cut -c 6-)"

# vim copy mode rebinds for (tmux 2.4+)
# https://shapeshed.com/custom-vim-bindings-in-tmux-2-4/
# https://github.com/tmux/tmux/issues/754#issuecomment-303156000
# https://stackoverflow.com/a/40902312
# Note: rectangle-toggle (aka Visual Block Mode) > hit v then C-v to trigger it
if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.4" | bc)" = 1 ]' \
  'bind-key -T copy-mode-vi v send-keys -X begin-selection; \
  bind-key -T copy-mode-vi V send-keys -X select-line; \
  bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle; \
  bind-key -T choice-mode-vi h send-keys -X tree-collapse ; \
  bind-key -T choice-mode-vi l send-keys -X tree-expand ; \
  bind-key -T choice-mode-vi H send-keys -X tree-collapse-all ; \
  bind-key -T choice-mode-vi L send-keys -X tree-expand-all ; \
  bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe "xclip -in -selection clipboard"; \
  bind-key -T copy-mode-vi y send-keys -X copy-pipe "xclip -in -selection clipboard"'

# vim copy mode rebinds for (tmux 2.3 or lower)
if-shell -b '[ "$(echo "$TMUX_VERSION < 2.4" | bc)" = 1 ]' \
  'bind-key -t vi-copy v begin-selection; \
  bind-key -t vi-copy V select-line; \
  bind-key -t vi-copy C-v rectangle-toggle; \
  bind-key -t vi-choice h tree-collapse; \
  bind-key -t vi-choice l tree-expand; \
  bind-key -t vi-choice H tree-collapse-all; \
  bind-key -t vi-choice L tree-expand-all; \
  bind-key -t vi-copy MouseDragEnd1Pane copy-pipe "xclip -in -selection clipboard"; \
  bind-key -t vi-copy y copy-pipe "xclip -in -selection clipboard"'




# google search the selected text (requires: surfraw, browser: e.g w3m)
# bind-key -T copy-mode-vi 'u' send -X copy-selection \; run-shell 'tmux show-buffer | xsel -i -b' \; new-window -n gsearch \; send-keys -t gsearch 'sr google "$(xsel -b)" && tmux kill-window' 'Enter'

# tmux 2.4 or higher
bind-key -T copy-mode-vi 'o' send-keys -X copy-selection \; new-window -n google \; send-keys -t google 'sr google "$(tmux show-buffer)" && tmux kill-window' 'Enter'
bind-key -T copy-mode-vi 'i' send-keys -X copy-selection \; new-window -n imagegoogle \; send-keys -t imagegoogle 'sr imagesgoogle "$(tmux show-buffer)" && tmux kill-window' 'Enter'
bind-key -T copy-mode-vi 'p' send-keys -X copy-selection \; new-window -n wikipedia \; send-keys -t wikipedia 'sr wikipedia "$(tmux show-buffer)" && tmux kill-window' 'Enter'
bind-key -T copy-mode-vi 'u' send-keys -X copy-selection \; new-window -n youtube \; send-keys -t youtube 'mpsyt /"$(tmux show-buffer)" && tmux kill-window' 'Enter'
bind-key -T copy-mode-vi 'O' send-keys -X copy-selection \; new-window -n w3m \; send-keys -t w3m 'w3m "$(tmux show-buffer)" && tmux kill-window' 'Enter'

# translate, dictionary, text to speech
bind-key -T copy-mode-vi 't' send-keys -X copy-selection \; new-window -n translate \; send-keys -t translate 'translate-shell es "$(tmux show-buffer)" | w3m && tmux kill-window' 'Enter'
bind-key -T copy-mode-vi 'd' send-keys -X copy-selection \; new-window -n dict \; send-keys -t dict 'translate-shell -d "$(tmux show-buffer)" | w3m && tmux kill-window' 'Enter'
bind-key -T copy-mode-vi 's' send-keys -X copy-selection \; new-window -n speak \; send-keys -t speak 'translate-shell -brief "$(tmux show-buffer)" -play && tmux kill-window' 'Enter'


# use vim as copy mode
bind-key v capture-pane \; save-buffer /tmp/tmux-buffer \; new-window -n "vim-copymode" '$SHELL -c "vim /tmp/tmux-buffer"'


# https://github.com/wincent/wincent/blob/aa3a322e3a911dabe0ef398ebb1fd7c77209b8ac/roles/dotfiles/files/.tmux.conf
# https://www.youtube.com/watch?v=N0RL_J0LT9A
# Clipper.
# bind-key y run-shell "tmux save-buffer - | nc -U ~/.clipper.sock"
#
# # "copy-pipe" requires tmux >= 1.8
# bind-key -t vi-copy Enter copy-pipe "nc -U ~/.clipper.sock"

#}}}
#-------- Mouse {{{
#------------------------------------------------------
# mouse to highlight and copy; to paste use "prefix + ]"
# http://awhan.wordpress.com/2012/04/18/tmux-copy-paste-with-mouse/

# temporarily allow regular terminal copy mode while mouse mode is enable
# visual line:  shift+mouse
# visual block: ctrl+shift+mouse <-- only works on some terminals
# visual block: ctrl+mouse <-- (while mouse mode is disable) only works on some terminals

# toggle mouse mode (tmux 2.1 or higher)
# https://www.reddit.com/r/tmux/comments/3paqoi/tmux_21_has_been_released/cw552qd
bind-key m set-option -g -q mouse on \; display-message 'Mouse: ON'
bind-key M set-option -g -q mouse off \; display-message 'Mouse: OFF'

# bind-key m \
#   set-option -g -q mouse on \;\
#   display-message 'Mouse: ON'
#
# bind-key M \
#   set-option -g -q mouse off \;\
#   display-message 'Mouse: OFF'


# enable PageUp/Down as copy mode
# if in ncurses app (vim,nano ..etc) then functions as normal
bind-key -T root PPage if-shell -F "#{alternate_on}" "send-keys PPage" "copy-mode -e; send-keys PPage"
# bind-key -T copy-mode-vi PPage page-up
# bind-key -T copy-mode-vi NPage page-down

# bind-key -t vi-copy PPage page-up
# bind-key -t vi-copy NPage page-down



# bind-key -T root WheelUpPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; copy-mode -e; send-keys -M"
# bind-key -T root WheelDownPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; send-keys -M"
# bind-key -t vi-copy WheelUpPane halfpage-up
# bind-key -t vi-copy WheelDownPane halfpage-down



# demo: https://www.youtube.com/watch?v=N0RL_J0LT9A
# source: https://github.com/wincent/wincent/blob/aa3a322e3a911dabe0ef398ebb1fd7c77209b8ac/roles/dotfiles/files/.tmux.conf
# Mouse can be used to select panes, select windows (by clicking on the status
# bar), resize panes. For default bindings see `tmux list-keys` and `tmux
# list-keys -t vi-copy`.
# set -g mouse on

# Restore pre-2.1 behavior of scrolling with the scrollwheel in Vim, less, copy
# mode etc, otherwise entering copy mode if not already in it.
#
#   if in copy mode (pane_in_mode) || using the mouse already (mouse_any_flag)
#     pass through mouse events to current pane (send -Mt=)
#   elsif in alternate screen mode
#     send `Up` key
#   else
#     enter copy mode (-e exits if we scroll to the bottom)
#   end
#
bind-key -T root WheelUpPane \
  if-shell -Ft= '#{?pane_in_mode,1,#{mouse_any_flag}}' \
    'send -Mt=' \
    'if-shell -Ft= "#{alternate_on}" "send -t= Up" "copy-mode -et="'
bind-key -T root WheelDownPane \
  if-shell -Ft = '#{?pane_in_mode,1,#{mouse_any_flag}}' \
    'send -Mt=' \
    'if-shell -Ft= "#{alternate_on}"  "send -t= Down" "send -Mt="'

# }}}



#------------------------------------------------------
#-------- Window / Pane Settings {{{
#------------------------------------------------------
# start window/pane index on 1 instead of 0
# set-option -g base-index 1
# set-window-option -g pane-base-index 1

# pane divider color; non active pane
set -g pane-border-style fg=green
set -g pane-border-style bg=black

# pane divider color; active pane
# helps when you have more than two panes.
# version 1.8 makes it easy to see 2 panes now
set -g pane-active-border-style fg=white
set -g pane-active-border-style bg=magenta

# ask user to input window number they wish to swap with
# references: https://stackoverflow.com/questions/33396831/how-to-force-tmux-to-wait-for-output-from-command-prompt
# bind T command-prompt -p "Swap current window with?:" "swap-window -t '%1'"
bind-key S command-prompt -p "Swap current pane with?:" "swap-pane -t '%1'"

# swap windows/panes
bind-key -n M-Left swap-window -t -1
bind-key -n M-Right swap-window -t +1
# bind-key -n M-Up swap-pane -U     # alt+up   interferences with weechat
# bind-key -n M-Down swap-pane -D   # alt+down interferences with weechat

# auto renumber windows sequentially
# https://github.com/thoughtbot/dotfiles/blob/master/tmux.conf
set-option -g renumber-windows on

# set auto rename of windows base on command
# set-window-option -g automatic-rename on
# note: ohmyzsh users commet out DISABLE_AUTO_TITLE=true from zshrc to disable autorename
# http://superuser.com/questions/306028/tmux-and-zsh-custom-prompt-bug-with-window-name

#}}}
#-------- Statusbar {{{
#------------------------------------------------------
# stuff for the statusbar broken down into right, left and center

# UTF-8 character support in the status bar
# set-option -g status-utf8 on

set-option -g status-position top

# refresh the status bar every 1 second.
set-option -g status-interval 1

# Time messages remain in the status bar. Lower this number
# if this is too distracting.
set-option -g display-time 4000

# command/message line colors
set -g message-style fg=white
set -g message-style bg=black
set -g message-style bright

# CENTER {{{
# Symbol    Meaning ================================
#      *    Denotes the current window.
#      -    Marks the last window (previously selected).
#      #    Window is monitored and activity has been detected.
#      !    A bell has occurred in the window.
#      ~    The window has been silent for the monitor-silence interval.
#      M    The window contains the marked pane.
#      Z    The window's active pane is zoomed.

# monitor changes on non-focus window (activity symbol = #)
# (e.g 1:zsh  2:zsh  3:torr# 4:im- 5:chat# 6:fm# 7:conf*)
set-window-option -g monitor-activity on

# displays a message at the bottom when activity is detected (e.g Activity in Window 5)
# requires: monitor-activity on
# set-option -g visual-activity off

# bell colors (bell symbol = !)
# to simulate a bell alert use: sleep 3 && echo -e "\a"
#set-window-option -g window-status-bell-style 'fg=black,bg=colour5,bright'

# statusbar colors
#set-option -g status-fg white
#set-option -g status-bg black
#set -g status-style default

# window title colors; non active
#set -g window-status-style fg=cyan
#set -g window-status-style bg=default
#set -g window-status-style dim

# window title colors; active
#set -g window-status-current-style fg=white	#font
#set -g window-status-current-style bg=red	#boarder
#set -g window-status-current-style bright

#}}}
# LEFT SIDE {{{
#set-option -g status-justify centre
#set-option -g status-left-length 40
#set-option -g status-left "#[fg=green]Session: #S #[fg=yellow]#I #[fg=cyan]#P"

#}}}
# RIGHT SIDE {{{
# use "man date" to set the clock to your liking
#set-option -g status-right "#[fg=blue]#(~/battery Discharging) | #[fg=cyan]%a %D %l:%M:%p"

#}}}

##############################
### Color & Style Settings ###
##############################

source ~/.dotfiles/tmux/base16.sh

#}}}
#-------- External Scripts {{{
#------------------------------------------------------

# Run command on idle; screensaver
# demo video: http://www.youtube.com/watch?v=s0T82aJn1DQ
# set-option -g lock-after-time 300
# set-option -g lock-command "/usr/bin/cmatrix -C blue"

#}}}
#-------- Layout {{{
#------------------------------------------------------
# demo video: http://www.youtube.com/watch?v=sxw-n5Du600
# http://amjith.blogspot.com/2011/08/scripting-tmux-layouts.html
# http://unix.stackexchange.com/a/17118
# -v = split horizontal
# -h = split veritical

# Template
bind-key M-f new-window -n fm -c $HOME \; \
  send-keys -t fm 'echo "hello world"' 'Enter' \; \
  split-window -t fm \; \
  send-keys -t fm 'htop' 'Enter' \; \
  split-window -t fm -fh -p 27 -c "#{pane_current_path}" \; \
  send-keys -t fm 'tmux clock-mode' 'Enter'


# media mocp
bind-key M-m new-window -n moc -c $HOME \; \
  send-keys -t moc 'mocp' 'Enter' \; \
  split-window -t moc \; \
  send-keys -t moc 'htop' 'Enter' \; \
  split-window -t moc -fh -p 27 -c "#{pane_current_path}" \; \
  send-keys -t moc 'tmux clock-mode' 'Enter' \; \
  new-window -n rss -c $HOME \; \
  send-keys -t rss 'newsboat' 'Enter'

#bind-key M-w new-window -n wtsp -c $HOME \; \
  send-keys -t wtsp 'tsp -C && watch tsp' 'Enter' \; \
  split-window -t wtsp \; \
  send-keys -t wtsp 'tsp-ranger -C && watch TS_SOCKET=/tmp/ranger tsp' 'Enter' \; \
  split-window -t wtsp -h \; \
  send-keys -t wtsp 'tsp-w3m -C && watch TS_SOCKET=/tmp/w3m tsp' 'Enter' \; \
  split-window -t wtsp -fv -p 10

bind-key M-a new-window -n www -c $HOME \; \
  new-window -n bt -c $HOME \; \
  send-keys -t bt 'transmission-remote-cli' 'Enter' \; \
  split-window -t bt \; \
  send-keys -t bt 'lf ~/.dotfiles' 'Enter' \; \
  new-window -n mocp -c $HOME \; \
  send-keys -t mocp 'ncmpcpp' 'Enter' \; \
  split-window -t mocp \; \
  send-keys -t mocp 'mocp' 'Enter' \; \
  split-window -t mocp -fh -p 27 -c "#{pane_current_path}" \; \
  send-keys -t mocp 'tmux clock-mode' 'Enter' \; \
  new-window -n chat -c $HOME \; \
  send-keys -t chat 'weechat-curses' 'Enter' \; \
  split-window -t chat -fh -p 27 -c "#{pane_current_path}" \; \
  send-keys -t chat 'sleep 30 && tmux rename-window -t 4 chat && vim -c "set nowrap" ~/.cheat/upcoming' 'Enter' \; \
  new-window -n mail -c $HOME \; \
  send-keys -t mail 'neomutt' 'Enter' \; \
  new-window -n rss -c $HOME \; \
  send-keys -t rss 'newsboat' 'Enter' # \; \
 # new-window -n wtsp -c $HOME \; \
  send-keys -t wtsp 'tsp -C && watch tsp' 'Enter' \; \
  split-window -t wtsp \; \
  send-keys -t wtsp 'tsp-ranger -C && watch TS_SOCKET=/tmp/ranger tsp' 'Enter' \; \
  split-window -t wtsp -h \; \
  send-keys -t wtsp 'tsp-w3m -C && watch TS_SOCKET=/tmp/w3m tsp' 'Enter' \; \
  split-window -t wtsp -fv -p 10

  # send-keys -t chat 'sleep 60 && tmux rename-window -t 4 chat && finch' 'Enter' \; \
#}}}
#-------- URL Launcher {{{
#------------------------------------------------------
# This section is for grabbing links on the current pane/window without the mouse
# and launching it with GUI or CLI browser

# w3m context view (delete buffer when done)
# demo video: http://www.youtube.com/watch?v=C7YPjbrTeCs
# http://www.mail-archive.com/mutt-users@mutt.org/msg09657.html
# hit ':' to activate links; Tab or Esc+M to browse thru the links
# hit Esc then Shift+M to open GUI browser; make sure external browser is set in w3m config
# hit Q to quit without confirmation
# improved by @kutsan https://github.com/kutsan
#bind-key u capture-pane -b "w3m" \; \
#  save-buffer -b "w3m" /tmp/tmux-buffer \; \
#  new-window -n "w3m" '$SHELL -c "w3m < /tmp/tmux-buffer"' \; \
#  delete-buffer -b "w3m"

# urlview
# demo video: http://www.youtube.com/watch?v=guB4WuVFhtY
# https://wiki.archlinux.org/index.php/Tmux#Browsing_URL.27s
# to set default browser add to ~/.urlview; COMMAND exec >> /tmp/urlview.out 2>&1; set -x; $BROWSER
# bind-key U capture-pane \; save-buffer /tmp/tmux-buffer \; new-window -n "urlview" '$SHELL -c "urlview < /tmp/tmux-buffer"'
bind-key U capture-pane \; save-buffer /tmp/tmux-buffer \; split-window -fv -p 30 '$SHELL -c "urlview < /tmp/tmux-buffer"'

# urlscan context view and url view
# demo video: http://www.youtube.com/watch?v=c-3IdFufY5Q
# compact view; show links only
# bind-key y capture-pane \; save-buffer /tmp/tmux-buffer \; new-window -n "urlscan" '$SHELL -c "urlscan -c < /tmp/tmux-buffer"'
# context view; show dialog near links
# bind-key Y capture-pane \; save-buffer /tmp/tmux-buffer \; new-window -n "urlscan" '$SHELL -c "urlscan < /tmp/tmux-buffer"'


#}}}
#-------- Fuzzy Finder / Quick Spawn Commands {{{
#------------------------------------------------------
# bind-key b split-window "tmux lsw | percol --initial-index $(tmux lsw | awk '/active.$/ {print NR-1}') | cut -d':' -f 1 | tr -d '\n' | xargs -0 tmux select-window -t"
# bind-key B split-window "tmux ls | percol --initial-index $(tmux ls | awk \"/^$(tmux display-message -p '#{session_name}'):/ {print NR-1}\") | cut -d':' -f 1 | tr -d '\n' | xargs -0 tmux switch-client -t"

#bind-key -n 'C-\' new-window -n bookmarks \; send-keys -t bookmarks 'feezf-bookmarks2clipboard && tmux kill-window' 'Enter'
#bind-key -n 'M-\' new-window -n locate \; send-keys -t locate 'ranger --cmd=fzf_locate && tmux kill-window' 'Enter'
#bind-key -n 'C-]' new-window -n clipboard \; send-keys -t clipboard 'fzf-clipboard && tmux kill-window' 'Enter'

#bind-key "'" new-window -n snippet \; send-keys -t snippet 'fzf-snippet && tmux kill-window' 'Enter'
#bind-key '"' new-window -n multisnippet \; send-keys -t multisnippet 'fzf-multisnippet && tmux kill-window' 'Enter'
# bind-key Tab new-window -n launcher \; send-keys -t launcher 'fzf-launcher && tmux kill-window' 'Enter'
#bind-key Tab new-window -n fzf-bangs \; send-keys -t fzf-bangs 'rofi-fzf ; tmux kill-window' 'Enter'
#bind-key BTab new-window -n playonlinux \; send-keys -t playonlinux 'fzf-playonlinux && tmux kill-window' 'Enter'



# 'DC' = delete key
bind-key 'DC' new-window -n htop \; send-keys -t htop 'htop && tmux kill-window' 'Enter'
# bind-key BSpace new-window -n mantmux \; send-keys -t mantmux 'man tmux && tmux kill-window' 'Enter'
bind-key BSpace new-window -n vol \; send-keys -t vol 'pulsemixer && tmux kill-window' 'Enter'
# bind-key -n 'C-DC' new-window -n keepassc \; send-keys -t keepassc 'keepassc -d ~/.keepass/masterlock.kdb && tmux kill-window' 'Enter'
# bind-key '/' split-window -v -p 50 "$SHELL -ic 'tmux-discover-pane && tmux kill-pane'"

# bind-key '/' split-window -fv \; send-keys '@discover-tmux '
bind-key Enter split-window -fv \; send-keys 'sr '
# bind-key b split-window -fv \; send-keys 'fzf-bookmarkscli && tmux kill-pane' 'Enter'
bind-key y split-window -fv \; send-keys 'mpsyt /'

# references:
# bind-key -n 'C-[' new-window -n playonlinux \; send-keys "fzf-playonlinux && tmux kill-window\n"
# bind-key g new-window -n nw "zsh -ic 'fzf-bookmarks && tmux kill-window' ; zsh"
# bind-key -n C-M-Space new-window -n clipboard \; send-keys 'fzf-clipboard && tmux kill-window' 'Enter'

#}}}
#-------- Empty {{{
#------------------------------------------------------

#}}}
#-------- Empty {{{
#------------------------------------------------------

#}}}
#-------- Empty {{{
#------------------------------------------------------

#}}}
#-------- Testing Area {{{
#------------------------------------------------------
# dont use C-[ because it will double bind with Escape key; ^[ = escape

# pipe pane to log file
# https://gist.github.com/napcs/1147532
# bind-key P pipe-pane -o "cat >>/tmp/#W-tmux.log" \; display-message "Toggled logging to /tmp/#W-tmux.log"
# bind-key T pipe-pane -o "$(cat >> /tmp/tmux_newsbeuter_title) | grep 'Title:' | xclip -selection clipboard" \; display-message "Copied Newsbeuter Title"

# mouse wheel scrolling -- whole window not individual panes
#set-option -g terminal-overrides 'xterm*:smcup@:rmcup@'

# select panes (no prefix)
# need to try: http://robots.thoughtbot.com/post/53022241323/seamlessly-navigate-vim-and-tmux-splits
# C-l by deafult clears terminal screen
#bind-key -n C-k select-pane -U
#bind-key -n C-j select-pane -D

# https://gist.github.com/snuggs/800936
# bind o select-layout "active-only"
# bind M-- select-layout "even-vertical"
# bind M-| select-layout "even-horizontal"
# bind M-r rotate-window


# http://unix.stackexchange.com/a/70798
# bind -t vi-copy y copy-pipe "xclip"



# root session auto timeout
# http://blog.killtheradio.net/technology/tmuxscreen-and-root-shells-a-new-trick-i-just-learned-tmout/

# Color background of active and inactive pane
# http://www.deanbodenham.com/learn/tmux-pane-colours
# set-option -g window-style 'fg=colour247,bg=green'
# set-option -g window-active-style 'fg=colour250,bg=black'

# bind-key U capture-pane -S - '\;' split-window -v "tmux show-buffer | sed '/^\s*$/d' | view - +'$' +'set clipboard=unnamed'; xclip -o -selection clipboard | tmux load-buffer -"

#bind-key W split-window -fv -p 35 '$SHELL -c "(grep extbrowser ~/.w3m/config && grep SHELL ~/.w3m/keymap) | less"'

#}}}

# select urls from tmux-shell and open with xdg-open (multisekect - TAB)
bind-key 'u' send-keys "$HOME/scripts/fzf-url.sh \n";

