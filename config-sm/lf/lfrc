# Basic vars
# Vars that depend on environmental variables
set previewer ~/.config/lf/preview
set cleaner ~/.config/lf/cleaner

#set previewer ~/.dotfiles/tools/pistol
set icons

# interpreter for shell commands (needs to be POSIX compatible)
set shell sh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# use enter for shell commands
map <enter> shell

# ==============
# = Commands
# ==============

# basic stuff
cmd q quit
cmd wq quit
cmd edit $$EDITOR -- $f
cmd suedit $suedit -- $f
cmd jumpback push :mark-load<enter>'
cmd open        &opener -l$id -- $f
cmd openall     &opener -l$id -- $fx
cmd openallfork &opener -fl$id -- $fx

# ==============================================

# change No. of columns(2-3-5) depending on window width
cmd recol %{{
    w=$(tput cols)
    if [ $w -le 80 ]; then
        lf -remote "send $id set ratios 1:2"
    elif [ $w -le 160 ]; then
        lf -remote "send $id set ratios 1:2:3"
    else
        lf -remote "send $id set ratios 1:2:3:5"
    fi
}}

cmd bulk-rename ${{
    old="$(mktemp)"
    new="$(mktemp)"
    [ -n "$fs" ] && fs="$(ls)"
    printf '%s\n' "$fs" >"$old"
    printf '%s\n' "$fs" >"$new"
    $EDITOR "$new"
    [ "$(wc -l "$new")" -ne "$(wc -l "$old")" ] && exit
    paste "$old" "$new" |while IFS= read -r names; do
        src="$(printf '%s' "$names" | cut -f1)"
        dst="$(printf '%s' "$names" | cut -f2)"
        if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
            continue
        fi
        mv -- "$src" "$dst"
    done
    rm -- "$old" "$new"
    lf -remote "send $id unselect"
}} 

# ==============================================
# if it's a symlink, go to where it's pointing;
# if it's a file, open it with opener and fork it.
cmd openfork &{{
    if [ -d $f ]; then
        lfselect $id $(readlink -f $f)
    else
        opener -fl$id -- $f
    fi
}}
# ==============================================
# ==============================================

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
# cmds/functions
# cmd open ${{
#     case $(file --mime-type $f -b) in
# 	image/vnd.djvu|application/pdf|application/octet-stream) setsid -f zathura $fx >/dev/null 2>&1 ;;
#         text/*) $EDITOR $fx;;
# 	image/x-xcf) setsid -f gimp $f >/dev/null 2>&1 ;;
# 	image/svg+xml) display -- $f ;;
# 	image/*) rotdir $f | grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|tif\|ico\)\(_large\)*$" | sxiv -aio 2>/dev/null | lf-select ;;
# 	audio/*) mpv --audio-display=no $f ;;
# 	video/*) setsid -f mpv $f -quiet >/dev/null 2>&1 ;;
# 	application/pdf|application/vnd*|application/epub*) setsid -f zathura $fx >/dev/null 2>&1 ;;
#         *) for f in $fx; do setsid -f $OPENER $f >/dev/null 2>&1; done;;
#     esac
# }}

cmd open ${{
rotdir() {
[ -z "$1" ] && echo "usage: rotdir regex 2>&1" && exit 1
base="$(basename "$1")"
ls "$PWD" | awk -v BASE="$base" 'BEGIN { lines = ""; m = 0; } { if ($0 == BASE) { m = 1; } } { if (!m) { if (lines) { lines = lines"\n"; } lines = lines""$0; } else { print $0; } } END { print lines; }'
}
    case $(file --mime-type $f -b) in
        image/vnd.djvu|application/pdf|application/octet-stream) setsid zathura $fx >/dev/null 2>&1 & ;;
        text/troff) man ./ $f;;
        text/*) $EDITOR $fx;;
	    image/x-xcf|image/svg+xml) setsid gimp $f >/dev/null 2>&1 & ;;
	    image/*) rotdir $f | setsid sxiv -ai >/dev/null 2>&1 & ;;
	    audio/*) mpv --input-ipc-server=/tmp/mpvsoc$(date +%%s) $f ;;
	    video/*) setsid mpv --input-ipc-server=/tmp/mpvsoc$(date +%%s) $f -quiet >/dev/null 2>&1 & ;;
	    application/pdf) setsid zathura $fx >/dev/null 2>&1 & ;;
        *) for f in $fx; do setsid $OPENER $f >/dev/null 2>&1 & done;;
    esac
}}

# FZF
cmd fzf ${{
	DIR=$(fd -t d | fzf)
	[ -z "$DIR" ] || lf -remote "send $id cd '$DIR'"
}}
cmd fzf-home ${{
#	DIR=$(fd -t d . "$HOME" | fzf)
  DIR=$(fzf --bind 'ctrl-d:reload("$HOME/.dotfiles/tools/fd" --full-path $HOME -t d),ctrl-f:reload(find . -type d)' \
      --height=50% --layout=reverse \
      --header 'Press CTRL-D for DIRs and CTRL-F for files')
	[ -z "$DIR" ] || lf -remote "send $id cd '$DIR'"
}}
## <Ctrl+f> - jump to a file or directory in lf using fuzzy matching
cmd fzf_jump ${{
   res="$(find . -maxdepth 1 | sk --reverse --header='Jump to location')"
   if [ -f "$res" ]; then
     cmd="select"
   elif [ -d "$res" ]; then
     cmd="cd"
   fi
lf -remote "send $id $cmd \"$res\""
}}

# delete current file or selected files (prompting)
cmd delete ${{
    set -f
    printf "%s\n\t" "$fx"
    printf "delete?[y/N]"
    read ans
    [ $ans = "y" ] && rm -rf $fx
}}

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}
# Create symlinks
cmd symlink &{{
	load=$(lf -remote 'load')
	list=$(echo "$load" | sed '1d')
	if [ -z "$list" ]; then
		lf -remote "send $id echo 'No files in buffer.'"
	else
		ln -s $list "$PWD"
		lf -remote 'send load'
		lf -remote 'send clear'
	fi
}}
cmd symlink-force &{{
	load=$(lf -remote 'load')
	list=$(echo "$load" | sed '1d')
	if [ -z "$list" ]; then
		lf -remote "send $id echo 'No files in buffer.'"
	else
		ln -sf $list "$PWD"
		lf -remote 'send load'
		lf -remote 'send clear'
	fi
}}
# Rename files using editor
cmd vi-rename ${{
	vimv $fx
	lf -remote "send $id echo '$(cat /tmp/.vimv-latest)'"
	lf -remote 'send load'
	lf -remote 'send clear'
}}

cmd finder $finder -f | lfselect $id
# open-with command
cmd open-with %"$@" $fx
map ` push :open-with<space>
###########################
map a
# FZF
map <space> fzf
map <c-n> fzf-home
map <c-f> :fzf_jump
# Bindings
map za    # delete za setting map za set info size:time
map za set hidden!
map zv set info size:time
map g top
map D delete
map ad push %mkdir<space>
map <enter> shell
map R reload

# preview with pistol
map L $pistol $f | less

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map Oo &mimeopen $f
map oo $nv $f
map on $nvim $f
map ox $xed $f
#map o &rifle $f
map OO $mimeopen --ask-default $f

# Symlink
map al symlink
map af symlink-force
cmd aj %lf -remote "send $id cd '$(autojump $1)'"
map aA push :aj<space>

## Unmap the default mapping so the rest of the following mapping won't collide
map r
map rc recol
# Simple rename:
map rr rename
map rv vi-rename
map rb bulk-rename

map E edit

# vim: ft=zsh
